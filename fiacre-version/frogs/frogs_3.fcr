type byte is 0..255

process _Toad (&_x: byte, &_y: byte, &_a: array 31 of byte) is
states _q

init to _q

from _q
	case ((_x > 0) and (_a[(((_y * 1) + _x) - 1)] = 1)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 1;
	_a[(((_y * 1) + _x) - 1)] := 0;
	_x := (_x - 1);
	to _q

from _q
	case ((_y > 0) and (_a[(((_y - 1) * 1) + _x)] = 1)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 1;
	_a[(((_y - 1) * 1) + _x)] := 0;
	_y := (_y - 1);
	to _q

from _q
	case (((_x > 1) and (_a[(((_y * 1) + _x) - 1)] = 2)) and (_a[(((_y * 1) + _x) - 2)] = 1)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 1;
	_a[(((_y * 1) + _x) - 2)] := 0;
	_x := (_x - 2);
	to _q

from _q
	case (((_y > 1) and (_a[(((_y - 1) * 1) + _x)] = 2)) and (_a[(((_y - 2) * 1) + _x)] = 1)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 1;
	_a[(((_y - 2) * 1) + _x)] := 0;
	_y := (_y - 2);
	to _q


process _Frog (&_x: byte, &_y: byte, &_a: array 31 of byte) is
states _q

init to _q

from _q
	case ((_x < (1 - 1)) and (_a[(((_y * 1) + _x) + 1)] = 2)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 2;
	_a[(((_y * 1) + _x) + 1)] := 0;
	_x := (_x + 1);
	to _q

from _q
	case ((_y < (31 - 1)) and (_a[(((_y + 1) * 1) + _x)] = 2)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 2;
	_a[(((_y + 1) * 1) + _x)] := 0;
	_y := (_y + 1);
	to _q

from _q
	case (((_x < (1 - 2)) and (_a[(((_y * 1) + _x) + 1)] = 1)) and (_a[(((_y * 1) + _x) + 2)] = 2)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 2;
	_a[(((_y * 1) + _x) + 2)] := 0;
	_x := (_x + 2);
	to _q

from _q
	case (((_y < (31 - 2)) and (_a[(((_y + 1) * 1) + _x)] = 1)) and (_a[(((_y + 2) * 1) + _x)] = 2)) of
	true -> null
	end case;
	_a[((_y * 1) + _x)] := 2;
	_a[(((_y + 2) * 1) + _x)] := 0;
	_y := (_y + 2);
	to _q


process _Check (&_a: read array 31 of byte) is
states _not_done, _done

init to _not_done

from _not_done
	case ((((((((((((((((((((((((((((((_a[0] = 2) and (_a[1] = 2)) and (_a[2] = 2)) and (_a[3] = 2)) and (_a[4] = 2)) and (_a[5] = 2)) and (_a[6] = 2)) and (_a[7] = 2)) and (_a[8] = 2)) and (_a[9] = 2)) and (_a[10] = 2)) and (_a[11] = 2)) and (_a[12] = 2)) and (_a[13] = 2)) and (_a[14] = 2)) and (_a[16] = 1)) and (_a[17] = 1)) and (_a[18] = 1)) and (_a[19] = 1)) and (_a[20] = 1)) and (_a[21] = 1)) and (_a[22] = 1)) and (_a[23] = 1)) and (_a[24] = 1)) and (_a[25] = 1)) and (_a[26] = 1)) and (_a[27] = 1)) and (_a[28] = 1)) and (_a[29] = 1)) and (_a[30] = 1)) of
	true -> null
	end case;
	to _done


component sys is
var 
	
	_a: array 31 of byte := [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 
	
	_x: byte := 0, 
	
	_y: byte := 15

par 
	_Toad(&_x, &_y, &_a) 
	 || _Frog(&_x, &_y, &_a) 
	 || _Check(&_a) 
end par


sys
