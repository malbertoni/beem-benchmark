type byte is 0..255

process _P_0 [_link_0_out: in none, _link_1_in: out none] is
states _wait, _CS, _got_msg
var 
	_status: byte := 0, 
	_v: byte 
init to _CS

from _wait
	_link_0_out? _v;
	to _got_msg

from _got_msg
	case (_v = 255) of
	true -> null
	end case;
	to _CS

from _CS
	_link_1_in! 255;
	_status := 0;
	to _wait

from _wait
	case (_status = 0) of
	true -> null
	end case;
	_link_1_in! 24;
	_status := 1;
	to _wait

from _got_msg
	case ((_v <> 255) and (_v > 24)) of
	true -> null
	end case;
	_link_1_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 1)) and (_v < 24)) of
	true -> null
	end case;
	_link_1_in! _v;
	_status := 2;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 0)) and (_v < 24)) of
	true -> null
	end case;
	_link_1_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 24)) and (_status <> 1)) of
	true -> null
	end case;
	_status := 0;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 24)) and (_status = 1)) of
	true -> null
	end case;
	to _CS


process _P_1 [_link_1_out: in none, _link_2_in: out none] is
states _wait, _CS, _got_msg
var 
	_status: byte := 0, 
	_v: byte 
init to _wait

from _wait
	_link_1_out? _v;
	to _got_msg

from _got_msg
	case (_v = 255) of
	true -> null
	end case;
	to _CS

from _CS
	_link_2_in! 255;
	_status := 0;
	to _wait

from _wait
	case (_status = 0) of
	true -> null
	end case;
	_link_2_in! 14;
	_status := 1;
	to _wait

from _got_msg
	case ((_v <> 255) and (_v > 14)) of
	true -> null
	end case;
	_link_2_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 1)) and (_v < 14)) of
	true -> null
	end case;
	_link_2_in! _v;
	_status := 2;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 0)) and (_v < 14)) of
	true -> null
	end case;
	_link_2_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 14)) and (_status <> 1)) of
	true -> null
	end case;
	_status := 0;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 14)) and (_status = 1)) of
	true -> null
	end case;
	to _CS


process _P_2 [_link_2_out: in none, _link_3_in: out none] is
states _wait, _CS, _got_msg
var 
	_status: byte := 0, 
	_v: byte 
init to _wait

from _wait
	_link_2_out? _v;
	to _got_msg

from _got_msg
	case (_v = 255) of
	true -> null
	end case;
	to _CS

from _CS
	_link_3_in! 255;
	_status := 0;
	to _wait

from _wait
	case (_status = 0) of
	true -> null
	end case;
	_link_3_in! 6;
	_status := 1;
	to _wait

from _got_msg
	case ((_v <> 255) and (_v > 6)) of
	true -> null
	end case;
	_link_3_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 1)) and (_v < 6)) of
	true -> null
	end case;
	_link_3_in! _v;
	_status := 2;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 0)) and (_v < 6)) of
	true -> null
	end case;
	_link_3_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 6)) and (_status <> 1)) of
	true -> null
	end case;
	_status := 0;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 6)) and (_status = 1)) of
	true -> null
	end case;
	to _CS


process _P_3 [_link_3_out: in none, _link_0_in: out none] is
states _wait, _CS, _got_msg
var 
	_status: byte := 0, 
	_v: byte 
init to _wait

from _wait
	_link_3_out? _v;
	to _got_msg

from _got_msg
	case (_v = 255) of
	true -> null
	end case;
	to _CS

from _CS
	_link_0_in! 255;
	_status := 0;
	to _wait

from _wait
	case (_status = 0) of
	true -> null
	end case;
	_link_0_in! 0;
	_status := 1;
	to _wait

from _got_msg
	case ((_v <> 255) and (_v > 0)) of
	true -> null
	end case;
	_link_0_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 1)) and (_v < 0)) of
	true -> null
	end case;
	_link_0_in! _v;
	_status := 2;
	to _wait

from _got_msg
	case (((_v <> 255) and (_status = 0)) and (_v < 0)) of
	true -> null
	end case;
	_link_0_in! _v;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 0)) and (_status <> 1)) of
	true -> null
	end case;
	_status := 0;
	to _wait

from _got_msg
	case (((_v <> 255) and (_v = 0)) and (_status = 1)) of
	true -> null
	end case;
	to _CS


process _channel_link_0 [_link_0_in: in none, _link_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_link_0_in? _v;
	to _tr

from _tr
	to _ready

from _tr
	_link_0_out! _v;
	to _ready


process _channel_link_1 [_link_1_in: in none, _link_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_link_1_in? _v;
	to _tr

from _tr
	to _ready

from _tr
	_link_1_out! _v;
	to _ready


process _channel_link_2 [_link_2_in: in none, _link_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_link_2_in? _v;
	to _tr

from _tr
	to _ready

from _tr
	_link_2_out! _v;
	to _ready


process _channel_link_3 [_link_3_in: in none, _link_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_link_3_in? _v;
	to _tr

from _tr
	to _ready

from _tr
	_link_3_out! _v;
	to _ready


component sys is
port 
	_link_0_in: none, 
	_link_0_out: none, 
	_link_1_in: none, 
	_link_1_out: none, 
	_link_2_in: none, 
	_link_2_out: none, 
	_link_3_in: none, 
	_link_3_out: none

par 
	_P_0[_link_0_out, _link_1_in] 
	 || _P_1[_link_1_out, _link_2_in] 
	 || _P_2[_link_2_out, _link_3_in] 
	 || _P_3[_link_3_out, _link_0_in] 
	 || _channel_link_0[_link_0_in, _link_0_out] 
	 || _channel_link_1[_link_1_in, _link_1_out] 
	 || _channel_link_2[_link_2_in, _link_2_out] 
	 || _channel_link_3[_link_3_in, _link_3_out] 
end par


sys
