type byte is 0..255

process _ButtonControler (&_token: byte, &_button_pressed: byte, &_requests: byte) is
states _BC

init to _BC

from _BC
	case ((_token = 0) and (_button_pressed = 0)) of
	true -> null
	end case;
	_token := 1;
	to _BC

from _BC
	case (((_token = 0) and (_button_pressed = 1)) and (_requests < 5)) of
	true -> null
	end case;
	_button_pressed := 0;
	_requests := (_requests + 1);
	_token := 1;
	to _BC

from _BC
	case (((_token = 0) and (_button_pressed = 1)) and (_requests = 5)) of
	true -> null
	end case;
	_button_pressed := 0;
	_token := 1;
	to _BC


process _ArmControler (&_token: byte, &_brick: byte, &_timer: read byte, &_arm_kicking: write byte, &_belt1_moving: write byte) is
states _AC0, _AC1

init to _AC0

from _AC0
	case ((_token = 1) and (not ((_brick = 4) and (_timer > 3)))) of
	true -> null
	end case;
	_token := 2;
	to _AC0

from _AC0
	case (((_token = 1) and (_brick = 4)) and (_timer > 3)) of
	true -> null
	end case;
	_brick := 0;
	_arm_kicking := 1;
	_belt1_moving := 0;
	_token := 2;
	to _AC1

from _AC1
	case (_token = 1) of
	true -> null
	end case;
	_arm_kicking := 0;
	_belt1_moving := 1;
	_token := 2;
	to _AC0


process _Belt2Controler (&_token: byte, &_brick: read byte, &_requests: read byte, &_timer: read byte, &_belt2_moving: write byte) is
states _B2C0, _tmp, _B2C1
var 
	_t1: byte := 0 
init to _B2C0

from _B2C0
	case ((_token = 2) and (not ((_brick = 3) and (_timer > 7)))) of
	true -> null
	end case;
	_token := 3;
	to _B2C0

from _B2C0
	case ((_token = 2) and ((_brick = 3) and (_timer > 7))) of
	true -> null
	end case;
	_t1 := 0;
	to _tmp

from _tmp
	case (_requests > 0) of
	true -> null
	end case;
	_belt2_moving := 2;
	_token := 3;
	to _B2C1

from _tmp
	case (_requests = 0) of
	true -> null
	end case;
	_belt2_moving := 1;
	_token := 3;
	to _B2C1

from _B2C1
	case ((_token = 2) and (_t1 < 4)) of
	true -> null
	end case;
	_t1 := (_t1 + 1);
	_token := 3;
	to _B2C1

from _B2C1
	case ((_token = 2) and (_t1 = 4)) of
	true -> null
	end case;
	_token := 3;
	to _B2C0


process _LightControler (&_token: byte, &_light_sensor_level: read byte, &_brick: write byte, &_timer: write byte) is
states _LC0, _tmp, _LC1
var 
	_x: byte 
init to _LC0

from _LC0
	case ((_token = 3) and (_light_sensor_level = 0)) of
	true -> null
	end case;
	_token := 4;
	to _LC0

from _LC0
	case ((_token = 3) and (_light_sensor_level = 1)) of
	true -> null
	end case;
	_x := 1;
	_token := 4;
	to _LC1

from _LC1
	case ((_token = 3) and (_light_sensor_level = 1)) of
	true -> null
	end case;
	_x := (_x + 1);
	_token := 4;
	to _LC1

from _LC1
	case ((_token = 3) and (_light_sensor_level = 0)) of
	true -> null
	end case;
	_timer := 0;
	to _tmp

from _tmp
	case (_x <= 2) of
	true -> null
	end case;
	_brick := 3;
	_token := 4;
	to _LC0

from _tmp
	case (_x > 2) of
	true -> null
	end case;
	_brick := 4;
	_token := 4;
	to _LC0


process _TimerStep (&_token: byte, &_timer: byte) is
states _T0

init to _T0

from _T0
	case ((_token = 4) and (_timer < 8)) of
	true -> null
	end case;
	_timer := (_timer + 1);
	_token := 5;
	to _T0

from _T0
	case ((_token = 4) and (_timer = 8)) of
	true -> null
	end case;
	_token := 5;
	to _T0


process _User (&_token: byte, &_put_short_brick: write byte, &_button_pressed: write byte, &_put_long_brick: write byte) is
states _U0, _Wait
var 
	_t2: byte 
init to _U0

from _U0
	case (_token = 5) of
	true -> null
	end case;
	_token := 6;
	to _U0

from _U0
	case (_token = 5) of
	true -> null
	end case;
	_button_pressed := 1;
	_token := 6;
	to _U0

from _U0
	case (_token = 5) of
	true -> null
	end case;
	_put_short_brick := 1;
	_t2 := 1;
	_token := 6;
	to _Wait

from _U0
	case (_token = 5) of
	true -> null
	end case;
	_put_long_brick := 1;
	_t2 := 3;
	_token := 6;
	to _Wait

from _Wait
	case ((_token = 5) and (_t2 > 0)) of
	true -> null
	end case;
	_t2 := (_t2 - 1);
	_token := 6;
	to _Wait

from _Wait
	case ((_token = 5) and (_t2 = 0)) of
	true -> null
	end case;
	_token := 6;
	to _U0


process _LongBrick1 (&_token: byte, &_put_long_brick: byte, &_arm_kicking: read byte, &_belt2_moving: read byte, &_belt1_moving: read byte, &_light_sensor_level: write byte) is
states _B
var 
	_location: byte := 0, 
	_position: byte := 0 
init to _B

from _B
	case (((_token = 6) and (_location = 0)) and (_put_long_brick = 0)) of
	true -> null
	end case;
	_token := 0;
	to _B

from _B
	case (((_token = 6) and (_location = 0)) and (_put_long_brick = 1)) of
	true -> null
	end case;
	_put_long_brick := 0;
	_location := 1;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 1)) and (_belt1_moving = 1)) and (((_position = 0) or ((_position > 1) and (_position < 5))) or ((_position > 5) and (_position < 8)))) of
	true -> null
	end case;
	_position := (_position + 1);
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 1)) and (_belt1_moving = 1)) and (_position = 1)) of
	true -> null
	end case;
	_light_sensor_level := 1;
	_position := (_position + 1);
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 1)) and (_belt1_moving = 1)) and (_position = 5)) of
	true -> null
	end case;
	_light_sensor_level := 0;
	_position := (_position + 1);
	_token := 0;
	to _B

from _B
	case (((((_token = 6) and (_location = 1)) and ((_position >= 8) and (_position <= 10))) and (_arm_kicking = 0)) and (_belt1_moving = 1)) of
	true -> null
	end case;
	_position := (_position + 1);
	_token := 0;
	to _B

from _B
	case (((((_token = 6) and (_location = 1)) and (_position = 11)) and (_arm_kicking = 0)) and (_belt1_moving = 1)) of
	true -> null
	end case;
	_location := 2;
	_position := 3;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 1)) and (_belt1_moving = 0)) and (_position < 8)) of
	true -> null
	end case;
	_token := 0;
	to _B

from _B
	case (((((_token = 6) and (_location = 1)) and (_belt1_moving = 0)) and ((_position >= 8) or (_position = 11))) and (_arm_kicking = 0)) of
	true -> null
	end case;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 1)) and (_position >= 8)) and (_arm_kicking = 1)) of
	true -> null
	end case;
	_location := 3;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 2)) and (_belt2_moving = 1)) and (_position < 5)) of
	true -> null
	end case;
	_position := (_position + 1);
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 2)) and (_belt2_moving = 2)) and (_position > 0)) of
	true -> null
	end case;
	_position := (_position - 1);
	_token := 0;
	to _B

from _B
	case (((_token = 6) and (_location = 2)) and (_belt2_moving = 0)) of
	true -> null
	end case;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 2)) and (_belt2_moving = 1)) and (_position = 5)) of
	true -> null
	end case;
	_location := 4;
	_token := 0;
	to _B

from _B
	case ((((_token = 6) and (_location = 2)) and (_belt2_moving = 2)) and (_position = 0)) of
	true -> null
	end case;
	_location := 5;
	_token := 0;
	to _B

from _B
	case (((_location = 5) or (_location = 4)) or (_location = 3)) of
	true -> null
	end case;
	_token := 0;
	to _B


component sys is
var 
	
	_token: byte := 0, 
	
	_belt1_moving: byte := 1, 
	
	_belt2_moving: byte := 0, 
	
	_arm_kicking: byte := 0, 
	
	_light_sensor_level: byte := 0, 
	
	_button_pressed: byte := 0, 
	
	_put_short_brick: byte := 0, 
	
	_put_long_brick: byte := 0, 
	
	_requests: byte := 0, 
	
	_timer: byte := 0, 
	
	_brick: byte := 0

par 
	_ButtonControler(&_token, &_button_pressed, &_requests) 
	 || _ArmControler(&_token, &_brick, &_timer, &_arm_kicking, &_belt1_moving) 
	 || _Belt2Controler(&_token, &_brick, &_requests, &_timer, &_belt2_moving) 
	 || _LightControler(&_token, &_light_sensor_level, &_brick, &_timer) 
	 || _TimerStep(&_token, &_timer) 
	 || _User(&_token, &_put_short_brick, &_button_pressed, &_put_long_brick) 
	 || _LongBrick1(&_token, &_put_long_brick, &_arm_kicking, &_belt2_moving, &_belt1_moving, &_light_sensor_level) 
end par


sys
