type byte is 0..255

process _Node_0 [_ch_2_0_out: in none, _ch_4_0_out: in none, _ch_8_0_out: in none, _ch_5_0_out: in none, _ch_3_0_out: in none, _ch_6_0_out: in none, _ch_7_0_out: in none, _ch_9_0_out: in none, _ch_0_0_out: in none, _ch_1_0_out: in none, _ch_0_8_in: out none, _ch_0_7_in: out none, _ch_0_6_in: out none, _ch_0_9_in: out none, _ch_0_5_in: out none, _ch_0_0_in: out none, _ch_0_3_in: out none, _ch_0_1_in: out none, _ch_0_2_in: out none, _ch_0_4_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) = 1) and (_connected[((0 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((0 * 10) + 0)] + _connected[((0 * 10) + 1)]) + _connected[((0 * 10) + 2)]) + _connected[((0 * 10) + 3)]) + _connected[((0 * 10) + 4)]) + _connected[((0 * 10) + 5)]) + _connected[((0 * 10) + 6)]) + _connected[((0 * 10) + 7)]) + _connected[((0 * 10) + 8)]) + _connected[((0 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 0) of
	true -> null
	end case;
	_ch_7_0_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 0) of
	true -> null
	end case;
	_ch_8_0_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 0) of
	true -> null
	end case;
	_ch_9_0_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((0 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((0 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_0_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_1_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_2_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_3_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_4_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_5_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_6_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_7_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_8_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_0_9_in! ((2 * 10) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_0_7_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_0_8_in! ((1 * 10) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((0 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_0_9_in! ((1 * 10) + 0);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 0) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 0) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 0) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 0) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 0) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 0) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 0) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 0) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 0) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 0) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_0_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 0;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_0_7_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_0_8_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_0_9_in! ((1 * 10) + 0);
	to _response

from _found_partner
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _found_q

from _found_partner
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _found_q

from _found_partner
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _found_q

from _found_partner
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _found_q

from _found_partner
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _found_q

from _found_partner
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _found_q

from _found_partner
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _found_q

from _found_partner
	case (7 <> 0) of
	true -> null
	end case;
	_ch_7_0_out? _m;
	to _found_q

from _found_partner
	case (8 <> 0) of
	true -> null
	end case;
	_ch_8_0_out? _m;
	to _found_q

from _found_partner
	case (9 <> 0) of
	true -> null
	end case;
	_ch_9_0_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _response_q

from _response
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _response_q

from _response
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _response_q

from _response
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _response_q

from _response
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _response_q

from _response
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _response_q

from _response
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _response_q

from _response
	case (7 <> 0) of
	true -> null
	end case;
	_ch_7_0_out? _m;
	to _response_q

from _response
	case (8 <> 0) of
	true -> null
	end case;
	_ch_8_0_out? _m;
	to _response_q

from _response
	case (9 <> 0) of
	true -> null
	end case;
	_ch_9_0_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_0_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_1_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_2_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_3_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_4_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_5_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_6_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_7_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_8_in! ((3 * 10) + 0);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_9_in! ((3 * 10) + 0);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 10) + 0);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 10) + 0);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 10) + 0);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 10) + 0);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 10) + 0);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 10) + 0);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 10) + 0);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_7_in! ((1 * 10) + 0);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_8_in! ((1 * 10) + 0);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_0_9_in! ((1 * 10) + 0);
	to _response

from _loser
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _loser_q

from _loser
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _loser_q

from _loser
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _loser_q

from _loser
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _loser_q

from _loser
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _loser_q

from _loser
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _loser_q

from _loser
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _loser_q

from _loser
	case (7 <> 0) of
	true -> null
	end case;
	_ch_7_0_out? _m;
	to _loser_q

from _loser
	case (8 <> 0) of
	true -> null
	end case;
	_ch_8_0_out? _m;
	to _loser_q

from _loser
	case (9 <> 0) of
	true -> null
	end case;
	_ch_9_0_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_1 [_ch_2_1_out: in none, _ch_5_1_out: in none, _ch_6_1_out: in none, _ch_0_1_out: in none, _ch_9_1_out: in none, _ch_3_1_out: in none, _ch_1_1_out: in none, _ch_8_1_out: in none, _ch_4_1_out: in none, _ch_7_1_out: in none, _ch_1_1_in: out none, _ch_1_5_in: out none, _ch_1_6_in: out none, _ch_1_0_in: out none, _ch_1_2_in: out none, _ch_1_4_in: out none, _ch_1_9_in: out none, _ch_1_7_in: out none, _ch_1_3_in: out none, _ch_1_8_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) = 1) and (_connected[((1 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((1 * 10) + 0)] + _connected[((1 * 10) + 1)]) + _connected[((1 * 10) + 2)]) + _connected[((1 * 10) + 3)]) + _connected[((1 * 10) + 4)]) + _connected[((1 * 10) + 5)]) + _connected[((1 * 10) + 6)]) + _connected[((1 * 10) + 7)]) + _connected[((1 * 10) + 8)]) + _connected[((1 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 1) of
	true -> null
	end case;
	_ch_7_1_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 1) of
	true -> null
	end case;
	_ch_8_1_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 1) of
	true -> null
	end case;
	_ch_9_1_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((1 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((1 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_0_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_1_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_2_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_3_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_4_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_5_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_6_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_7_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_8_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_1_9_in! ((2 * 10) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_1_7_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_1_8_in! ((1 * 10) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((1 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_1_9_in! ((1 * 10) + 1);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 1) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 1) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 1) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 1) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 1) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 1) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 1) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 1) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 1) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 1) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_1_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 1;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_1_7_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_1_8_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_1_9_in! ((1 * 10) + 1);
	to _response

from _found_partner
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _found_q

from _found_partner
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _found_q

from _found_partner
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _found_q

from _found_partner
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _found_q

from _found_partner
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _found_q

from _found_partner
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _found_q

from _found_partner
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _found_q

from _found_partner
	case (7 <> 1) of
	true -> null
	end case;
	_ch_7_1_out? _m;
	to _found_q

from _found_partner
	case (8 <> 1) of
	true -> null
	end case;
	_ch_8_1_out? _m;
	to _found_q

from _found_partner
	case (9 <> 1) of
	true -> null
	end case;
	_ch_9_1_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _response_q

from _response
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _response_q

from _response
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _response_q

from _response
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _response_q

from _response
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _response_q

from _response
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _response_q

from _response
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _response_q

from _response
	case (7 <> 1) of
	true -> null
	end case;
	_ch_7_1_out? _m;
	to _response_q

from _response
	case (8 <> 1) of
	true -> null
	end case;
	_ch_8_1_out? _m;
	to _response_q

from _response
	case (9 <> 1) of
	true -> null
	end case;
	_ch_9_1_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_0_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_1_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_2_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_3_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_4_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_5_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_6_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_7_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_8_in! ((3 * 10) + 1);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_9_in! ((3 * 10) + 1);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 10) + 1);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 10) + 1);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 10) + 1);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 10) + 1);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 10) + 1);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 10) + 1);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 10) + 1);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_7_in! ((1 * 10) + 1);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_8_in! ((1 * 10) + 1);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_1_9_in! ((1 * 10) + 1);
	to _response

from _loser
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _loser_q

from _loser
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _loser_q

from _loser
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _loser_q

from _loser
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _loser_q

from _loser
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _loser_q

from _loser
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _loser_q

from _loser
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _loser_q

from _loser
	case (7 <> 1) of
	true -> null
	end case;
	_ch_7_1_out? _m;
	to _loser_q

from _loser
	case (8 <> 1) of
	true -> null
	end case;
	_ch_8_1_out? _m;
	to _loser_q

from _loser
	case (9 <> 1) of
	true -> null
	end case;
	_ch_9_1_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_2 [_ch_4_2_out: in none, _ch_2_2_out: in none, _ch_8_2_out: in none, _ch_5_2_out: in none, _ch_9_2_out: in none, _ch_1_2_out: in none, _ch_3_2_out: in none, _ch_0_2_out: in none, _ch_7_2_out: in none, _ch_6_2_out: in none, _ch_2_1_in: out none, _ch_2_3_in: out none, _ch_2_5_in: out none, _ch_2_7_in: out none, _ch_2_8_in: out none, _ch_2_2_in: out none, _ch_2_4_in: out none, _ch_2_0_in: out none, _ch_2_6_in: out none, _ch_2_9_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) = 1) and (_connected[((2 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((2 * 10) + 0)] + _connected[((2 * 10) + 1)]) + _connected[((2 * 10) + 2)]) + _connected[((2 * 10) + 3)]) + _connected[((2 * 10) + 4)]) + _connected[((2 * 10) + 5)]) + _connected[((2 * 10) + 6)]) + _connected[((2 * 10) + 7)]) + _connected[((2 * 10) + 8)]) + _connected[((2 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 2) of
	true -> null
	end case;
	_ch_7_2_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 2) of
	true -> null
	end case;
	_ch_8_2_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 2) of
	true -> null
	end case;
	_ch_9_2_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((2 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((2 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_0_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_1_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_2_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_3_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_4_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_5_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_6_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_7_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_8_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_2_9_in! ((2 * 10) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_2_7_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_2_8_in! ((1 * 10) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((2 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_2_9_in! ((1 * 10) + 2);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 2) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 2) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 2) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 2) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 2) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 2) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 2) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 2) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 2) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 2) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_2_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 2;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_2_7_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_2_8_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_2_9_in! ((1 * 10) + 2);
	to _response

from _found_partner
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _found_q

from _found_partner
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _found_q

from _found_partner
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _found_q

from _found_partner
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _found_q

from _found_partner
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _found_q

from _found_partner
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _found_q

from _found_partner
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _found_q

from _found_partner
	case (7 <> 2) of
	true -> null
	end case;
	_ch_7_2_out? _m;
	to _found_q

from _found_partner
	case (8 <> 2) of
	true -> null
	end case;
	_ch_8_2_out? _m;
	to _found_q

from _found_partner
	case (9 <> 2) of
	true -> null
	end case;
	_ch_9_2_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _response_q

from _response
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _response_q

from _response
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _response_q

from _response
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _response_q

from _response
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _response_q

from _response
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _response_q

from _response
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _response_q

from _response
	case (7 <> 2) of
	true -> null
	end case;
	_ch_7_2_out? _m;
	to _response_q

from _response
	case (8 <> 2) of
	true -> null
	end case;
	_ch_8_2_out? _m;
	to _response_q

from _response
	case (9 <> 2) of
	true -> null
	end case;
	_ch_9_2_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_0_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_1_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_2_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_3_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_4_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_5_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_6_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_7_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_8_in! ((3 * 10) + 2);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_9_in! ((3 * 10) + 2);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 10) + 2);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 10) + 2);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 10) + 2);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 10) + 2);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 10) + 2);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 10) + 2);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 10) + 2);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_7_in! ((1 * 10) + 2);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_8_in! ((1 * 10) + 2);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_2_9_in! ((1 * 10) + 2);
	to _response

from _loser
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _loser_q

from _loser
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _loser_q

from _loser
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _loser_q

from _loser
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _loser_q

from _loser
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _loser_q

from _loser
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _loser_q

from _loser
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _loser_q

from _loser
	case (7 <> 2) of
	true -> null
	end case;
	_ch_7_2_out? _m;
	to _loser_q

from _loser
	case (8 <> 2) of
	true -> null
	end case;
	_ch_8_2_out? _m;
	to _loser_q

from _loser
	case (9 <> 2) of
	true -> null
	end case;
	_ch_9_2_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_3 [_ch_2_3_out: in none, _ch_6_3_out: in none, _ch_8_3_out: in none, _ch_5_3_out: in none, _ch_7_3_out: in none, _ch_0_3_out: in none, _ch_4_3_out: in none, _ch_9_3_out: in none, _ch_1_3_out: in none, _ch_3_3_out: in none, _ch_3_8_in: out none, _ch_3_0_in: out none, _ch_3_5_in: out none, _ch_3_1_in: out none, _ch_3_2_in: out none, _ch_3_6_in: out none, _ch_3_4_in: out none, _ch_3_3_in: out none, _ch_3_7_in: out none, _ch_3_9_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) = 1) and (_connected[((3 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((3 * 10) + 0)] + _connected[((3 * 10) + 1)]) + _connected[((3 * 10) + 2)]) + _connected[((3 * 10) + 3)]) + _connected[((3 * 10) + 4)]) + _connected[((3 * 10) + 5)]) + _connected[((3 * 10) + 6)]) + _connected[((3 * 10) + 7)]) + _connected[((3 * 10) + 8)]) + _connected[((3 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 3) of
	true -> null
	end case;
	_ch_7_3_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 3) of
	true -> null
	end case;
	_ch_8_3_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 3) of
	true -> null
	end case;
	_ch_9_3_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((3 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((3 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_0_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_1_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_2_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_3_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_4_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_5_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_6_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_7_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_8_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_3_9_in! ((2 * 10) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_3_7_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_3_8_in! ((1 * 10) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((3 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_3_9_in! ((1 * 10) + 3);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 3) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 3) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 3) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 3) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 3) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 3) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 3) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 3) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 3) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 3) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_3_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 3;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_3_7_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_3_8_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_3_9_in! ((1 * 10) + 3);
	to _response

from _found_partner
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _found_q

from _found_partner
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _found_q

from _found_partner
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _found_q

from _found_partner
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _found_q

from _found_partner
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _found_q

from _found_partner
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _found_q

from _found_partner
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _found_q

from _found_partner
	case (7 <> 3) of
	true -> null
	end case;
	_ch_7_3_out? _m;
	to _found_q

from _found_partner
	case (8 <> 3) of
	true -> null
	end case;
	_ch_8_3_out? _m;
	to _found_q

from _found_partner
	case (9 <> 3) of
	true -> null
	end case;
	_ch_9_3_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _response_q

from _response
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _response_q

from _response
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _response_q

from _response
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _response_q

from _response
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _response_q

from _response
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _response_q

from _response
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _response_q

from _response
	case (7 <> 3) of
	true -> null
	end case;
	_ch_7_3_out? _m;
	to _response_q

from _response
	case (8 <> 3) of
	true -> null
	end case;
	_ch_8_3_out? _m;
	to _response_q

from _response
	case (9 <> 3) of
	true -> null
	end case;
	_ch_9_3_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_0_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_1_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_2_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_3_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_4_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_5_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_6_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_7_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_8_in! ((3 * 10) + 3);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_9_in! ((3 * 10) + 3);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 10) + 3);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 10) + 3);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 10) + 3);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 10) + 3);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 10) + 3);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 10) + 3);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 10) + 3);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_7_in! ((1 * 10) + 3);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_8_in! ((1 * 10) + 3);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_3_9_in! ((1 * 10) + 3);
	to _response

from _loser
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _loser_q

from _loser
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _loser_q

from _loser
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _loser_q

from _loser
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _loser_q

from _loser
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _loser_q

from _loser
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _loser_q

from _loser
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _loser_q

from _loser
	case (7 <> 3) of
	true -> null
	end case;
	_ch_7_3_out? _m;
	to _loser_q

from _loser
	case (8 <> 3) of
	true -> null
	end case;
	_ch_8_3_out? _m;
	to _loser_q

from _loser
	case (9 <> 3) of
	true -> null
	end case;
	_ch_9_3_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_4 [_ch_3_4_out: in none, _ch_5_4_out: in none, _ch_7_4_out: in none, _ch_1_4_out: in none, _ch_2_4_out: in none, _ch_4_4_out: in none, _ch_6_4_out: in none, _ch_0_4_out: in none, _ch_8_4_out: in none, _ch_9_4_out: in none, _ch_4_5_in: out none, _ch_4_1_in: out none, _ch_4_7_in: out none, _ch_4_4_in: out none, _ch_4_8_in: out none, _ch_4_3_in: out none, _ch_4_9_in: out none, _ch_4_0_in: out none, _ch_4_6_in: out none, _ch_4_2_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) = 1) and (_connected[((4 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((4 * 10) + 0)] + _connected[((4 * 10) + 1)]) + _connected[((4 * 10) + 2)]) + _connected[((4 * 10) + 3)]) + _connected[((4 * 10) + 4)]) + _connected[((4 * 10) + 5)]) + _connected[((4 * 10) + 6)]) + _connected[((4 * 10) + 7)]) + _connected[((4 * 10) + 8)]) + _connected[((4 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 4) of
	true -> null
	end case;
	_ch_7_4_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 4) of
	true -> null
	end case;
	_ch_8_4_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 4) of
	true -> null
	end case;
	_ch_9_4_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((4 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((4 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_0_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_1_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_2_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_3_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_4_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_5_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_6_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_7_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_8_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_4_9_in! ((2 * 10) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_4_7_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_4_8_in! ((1 * 10) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((4 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_4_9_in! ((1 * 10) + 4);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 4) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 4) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 4) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 4) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 4) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 4) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 4) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 4) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 4) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 4) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_4_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 4;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_4_7_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_4_8_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_4_9_in! ((1 * 10) + 4);
	to _response

from _found_partner
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _found_q

from _found_partner
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _found_q

from _found_partner
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _found_q

from _found_partner
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _found_q

from _found_partner
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _found_q

from _found_partner
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _found_q

from _found_partner
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _found_q

from _found_partner
	case (7 <> 4) of
	true -> null
	end case;
	_ch_7_4_out? _m;
	to _found_q

from _found_partner
	case (8 <> 4) of
	true -> null
	end case;
	_ch_8_4_out? _m;
	to _found_q

from _found_partner
	case (9 <> 4) of
	true -> null
	end case;
	_ch_9_4_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _response_q

from _response
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _response_q

from _response
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _response_q

from _response
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _response_q

from _response
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _response_q

from _response
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _response_q

from _response
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _response_q

from _response
	case (7 <> 4) of
	true -> null
	end case;
	_ch_7_4_out? _m;
	to _response_q

from _response
	case (8 <> 4) of
	true -> null
	end case;
	_ch_8_4_out? _m;
	to _response_q

from _response
	case (9 <> 4) of
	true -> null
	end case;
	_ch_9_4_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_0_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_1_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_2_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_3_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_4_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_5_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_6_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_7_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_8_in! ((3 * 10) + 4);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_9_in! ((3 * 10) + 4);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 10) + 4);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 10) + 4);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 10) + 4);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 10) + 4);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 10) + 4);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 10) + 4);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 10) + 4);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_7_in! ((1 * 10) + 4);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_8_in! ((1 * 10) + 4);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_4_9_in! ((1 * 10) + 4);
	to _response

from _loser
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _loser_q

from _loser
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _loser_q

from _loser
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _loser_q

from _loser
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _loser_q

from _loser
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _loser_q

from _loser
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _loser_q

from _loser
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _loser_q

from _loser
	case (7 <> 4) of
	true -> null
	end case;
	_ch_7_4_out? _m;
	to _loser_q

from _loser
	case (8 <> 4) of
	true -> null
	end case;
	_ch_8_4_out? _m;
	to _loser_q

from _loser
	case (9 <> 4) of
	true -> null
	end case;
	_ch_9_4_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_5 [_ch_3_5_out: in none, _ch_7_5_out: in none, _ch_8_5_out: in none, _ch_4_5_out: in none, _ch_1_5_out: in none, _ch_5_5_out: in none, _ch_6_5_out: in none, _ch_0_5_out: in none, _ch_2_5_out: in none, _ch_9_5_out: in none, _ch_5_8_in: out none, _ch_5_0_in: out none, _ch_5_2_in: out none, _ch_5_1_in: out none, _ch_5_5_in: out none, _ch_5_4_in: out none, _ch_5_9_in: out none, _ch_5_3_in: out none, _ch_5_6_in: out none, _ch_5_7_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) = 1) and (_connected[((5 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((5 * 10) + 0)] + _connected[((5 * 10) + 1)]) + _connected[((5 * 10) + 2)]) + _connected[((5 * 10) + 3)]) + _connected[((5 * 10) + 4)]) + _connected[((5 * 10) + 5)]) + _connected[((5 * 10) + 6)]) + _connected[((5 * 10) + 7)]) + _connected[((5 * 10) + 8)]) + _connected[((5 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 5) of
	true -> null
	end case;
	_ch_7_5_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 5) of
	true -> null
	end case;
	_ch_8_5_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 5) of
	true -> null
	end case;
	_ch_9_5_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((5 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((5 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_0_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_1_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_2_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_3_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_4_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_5_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_6_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_7_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_8_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_5_9_in! ((2 * 10) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_5_7_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_5_8_in! ((1 * 10) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((5 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_5_9_in! ((1 * 10) + 5);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 5) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 5) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 5) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 5) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 5) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 5) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 5) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 5) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 5) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 5) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_5_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 5;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_5_7_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_5_8_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_5_9_in! ((1 * 10) + 5);
	to _response

from _found_partner
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _found_q

from _found_partner
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _found_q

from _found_partner
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _found_q

from _found_partner
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _found_q

from _found_partner
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _found_q

from _found_partner
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _found_q

from _found_partner
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _found_q

from _found_partner
	case (7 <> 5) of
	true -> null
	end case;
	_ch_7_5_out? _m;
	to _found_q

from _found_partner
	case (8 <> 5) of
	true -> null
	end case;
	_ch_8_5_out? _m;
	to _found_q

from _found_partner
	case (9 <> 5) of
	true -> null
	end case;
	_ch_9_5_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _response_q

from _response
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _response_q

from _response
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _response_q

from _response
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _response_q

from _response
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _response_q

from _response
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _response_q

from _response
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _response_q

from _response
	case (7 <> 5) of
	true -> null
	end case;
	_ch_7_5_out? _m;
	to _response_q

from _response
	case (8 <> 5) of
	true -> null
	end case;
	_ch_8_5_out? _m;
	to _response_q

from _response
	case (9 <> 5) of
	true -> null
	end case;
	_ch_9_5_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_0_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_1_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_2_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_3_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_4_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_5_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_6_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_7_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_8_in! ((3 * 10) + 5);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_9_in! ((3 * 10) + 5);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 10) + 5);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 10) + 5);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 10) + 5);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 10) + 5);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 10) + 5);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 10) + 5);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 10) + 5);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_7_in! ((1 * 10) + 5);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_8_in! ((1 * 10) + 5);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_5_9_in! ((1 * 10) + 5);
	to _response

from _loser
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _loser_q

from _loser
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _loser_q

from _loser
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _loser_q

from _loser
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _loser_q

from _loser
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _loser_q

from _loser
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _loser_q

from _loser
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _loser_q

from _loser
	case (7 <> 5) of
	true -> null
	end case;
	_ch_7_5_out? _m;
	to _loser_q

from _loser
	case (8 <> 5) of
	true -> null
	end case;
	_ch_8_5_out? _m;
	to _loser_q

from _loser
	case (9 <> 5) of
	true -> null
	end case;
	_ch_9_5_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_6 [_ch_9_6_out: in none, _ch_1_6_out: in none, _ch_7_6_out: in none, _ch_2_6_out: in none, _ch_3_6_out: in none, _ch_4_6_out: in none, _ch_0_6_out: in none, _ch_5_6_out: in none, _ch_8_6_out: in none, _ch_6_6_out: in none, _ch_6_8_in: out none, _ch_6_6_in: out none, _ch_6_4_in: out none, _ch_6_9_in: out none, _ch_6_1_in: out none, _ch_6_0_in: out none, _ch_6_5_in: out none, _ch_6_7_in: out none, _ch_6_3_in: out none, _ch_6_2_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) = 1) and (_connected[((6 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((6 * 10) + 0)] + _connected[((6 * 10) + 1)]) + _connected[((6 * 10) + 2)]) + _connected[((6 * 10) + 3)]) + _connected[((6 * 10) + 4)]) + _connected[((6 * 10) + 5)]) + _connected[((6 * 10) + 6)]) + _connected[((6 * 10) + 7)]) + _connected[((6 * 10) + 8)]) + _connected[((6 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 6) of
	true -> null
	end case;
	_ch_7_6_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 6) of
	true -> null
	end case;
	_ch_8_6_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 6) of
	true -> null
	end case;
	_ch_9_6_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((6 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((6 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_0_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_1_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_2_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_3_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_4_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_5_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_6_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_7_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_8_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_6_9_in! ((2 * 10) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_6_7_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_6_8_in! ((1 * 10) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((6 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_6_9_in! ((1 * 10) + 6);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 6) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 6) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 6) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 6) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 6) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 6) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 6) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 6) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 6) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 6) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_6_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 6;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_6_7_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_6_8_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_6_9_in! ((1 * 10) + 6);
	to _response

from _found_partner
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _found_q

from _found_partner
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _found_q

from _found_partner
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _found_q

from _found_partner
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _found_q

from _found_partner
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _found_q

from _found_partner
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _found_q

from _found_partner
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _found_q

from _found_partner
	case (7 <> 6) of
	true -> null
	end case;
	_ch_7_6_out? _m;
	to _found_q

from _found_partner
	case (8 <> 6) of
	true -> null
	end case;
	_ch_8_6_out? _m;
	to _found_q

from _found_partner
	case (9 <> 6) of
	true -> null
	end case;
	_ch_9_6_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _response_q

from _response
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _response_q

from _response
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _response_q

from _response
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _response_q

from _response
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _response_q

from _response
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _response_q

from _response
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _response_q

from _response
	case (7 <> 6) of
	true -> null
	end case;
	_ch_7_6_out? _m;
	to _response_q

from _response
	case (8 <> 6) of
	true -> null
	end case;
	_ch_8_6_out? _m;
	to _response_q

from _response
	case (9 <> 6) of
	true -> null
	end case;
	_ch_9_6_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_0_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_1_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_2_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_3_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_4_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_5_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_6_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_7_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_8_in! ((3 * 10) + 6);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_9_in! ((3 * 10) + 6);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 10) + 6);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 10) + 6);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 10) + 6);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 10) + 6);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 10) + 6);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 10) + 6);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 10) + 6);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_7_in! ((1 * 10) + 6);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_8_in! ((1 * 10) + 6);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_6_9_in! ((1 * 10) + 6);
	to _response

from _loser
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _loser_q

from _loser
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _loser_q

from _loser
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _loser_q

from _loser
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _loser_q

from _loser
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _loser_q

from _loser
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _loser_q

from _loser
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _loser_q

from _loser
	case (7 <> 6) of
	true -> null
	end case;
	_ch_7_6_out? _m;
	to _loser_q

from _loser
	case (8 <> 6) of
	true -> null
	end case;
	_ch_8_6_out? _m;
	to _loser_q

from _loser
	case (9 <> 6) of
	true -> null
	end case;
	_ch_9_6_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_7 [_ch_1_7_out: in none, _ch_8_7_out: in none, _ch_4_7_out: in none, _ch_0_7_out: in none, _ch_2_7_out: in none, _ch_7_7_out: in none, _ch_6_7_out: in none, _ch_3_7_out: in none, _ch_9_7_out: in none, _ch_5_7_out: in none, _ch_7_3_in: out none, _ch_7_2_in: out none, _ch_7_0_in: out none, _ch_7_4_in: out none, _ch_7_5_in: out none, _ch_7_7_in: out none, _ch_7_8_in: out none, _ch_7_6_in: out none, _ch_7_9_in: out none, _ch_7_1_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) = 1) and (_connected[((7 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((7 * 10) + 0)] + _connected[((7 * 10) + 1)]) + _connected[((7 * 10) + 2)]) + _connected[((7 * 10) + 3)]) + _connected[((7 * 10) + 4)]) + _connected[((7 * 10) + 5)]) + _connected[((7 * 10) + 6)]) + _connected[((7 * 10) + 7)]) + _connected[((7 * 10) + 8)]) + _connected[((7 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 7) of
	true -> null
	end case;
	_ch_0_7_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 7) of
	true -> null
	end case;
	_ch_1_7_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 7) of
	true -> null
	end case;
	_ch_2_7_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 7) of
	true -> null
	end case;
	_ch_3_7_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 7) of
	true -> null
	end case;
	_ch_4_7_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 7) of
	true -> null
	end case;
	_ch_5_7_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 7) of
	true -> null
	end case;
	_ch_6_7_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 7) of
	true -> null
	end case;
	_ch_7_7_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 7) of
	true -> null
	end case;
	_ch_8_7_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 7) of
	true -> null
	end case;
	_ch_9_7_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((7 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((7 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_0_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_1_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_2_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_3_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_4_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_5_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_6_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_7_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_8_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_7_9_in! ((2 * 10) + 7);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_7_0_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_7_1_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_7_2_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_7_3_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_7_4_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_7_5_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_7_6_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_7_7_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_7_8_in! ((1 * 10) + 7);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((7 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_7_9_in! ((1 * 10) + 7);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 7) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 7) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 7) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 7) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 7) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 7) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 7) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 7) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 7) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_7_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 7) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_7_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 7;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_7_0_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_7_1_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_7_2_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_7_3_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_7_4_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_7_5_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_7_6_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_7_7_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_7_8_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_7_9_in! ((1 * 10) + 7);
	to _response

from _found_partner
	case (0 <> 7) of
	true -> null
	end case;
	_ch_0_7_out? _m;
	to _found_q

from _found_partner
	case (1 <> 7) of
	true -> null
	end case;
	_ch_1_7_out? _m;
	to _found_q

from _found_partner
	case (2 <> 7) of
	true -> null
	end case;
	_ch_2_7_out? _m;
	to _found_q

from _found_partner
	case (3 <> 7) of
	true -> null
	end case;
	_ch_3_7_out? _m;
	to _found_q

from _found_partner
	case (4 <> 7) of
	true -> null
	end case;
	_ch_4_7_out? _m;
	to _found_q

from _found_partner
	case (5 <> 7) of
	true -> null
	end case;
	_ch_5_7_out? _m;
	to _found_q

from _found_partner
	case (6 <> 7) of
	true -> null
	end case;
	_ch_6_7_out? _m;
	to _found_q

from _found_partner
	case (7 <> 7) of
	true -> null
	end case;
	_ch_7_7_out? _m;
	to _found_q

from _found_partner
	case (8 <> 7) of
	true -> null
	end case;
	_ch_8_7_out? _m;
	to _found_q

from _found_partner
	case (9 <> 7) of
	true -> null
	end case;
	_ch_9_7_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 7) of
	true -> null
	end case;
	_ch_0_7_out? _m;
	to _response_q

from _response
	case (1 <> 7) of
	true -> null
	end case;
	_ch_1_7_out? _m;
	to _response_q

from _response
	case (2 <> 7) of
	true -> null
	end case;
	_ch_2_7_out? _m;
	to _response_q

from _response
	case (3 <> 7) of
	true -> null
	end case;
	_ch_3_7_out? _m;
	to _response_q

from _response
	case (4 <> 7) of
	true -> null
	end case;
	_ch_4_7_out? _m;
	to _response_q

from _response
	case (5 <> 7) of
	true -> null
	end case;
	_ch_5_7_out? _m;
	to _response_q

from _response
	case (6 <> 7) of
	true -> null
	end case;
	_ch_6_7_out? _m;
	to _response_q

from _response
	case (7 <> 7) of
	true -> null
	end case;
	_ch_7_7_out? _m;
	to _response_q

from _response
	case (8 <> 7) of
	true -> null
	end case;
	_ch_8_7_out? _m;
	to _response_q

from _response
	case (9 <> 7) of
	true -> null
	end case;
	_ch_9_7_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_0_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_1_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_2_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_3_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_4_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_5_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_6_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_7_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_8_in! ((3 * 10) + 7);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_9_in! ((3 * 10) + 7);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_0_in! ((1 * 10) + 7);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_1_in! ((1 * 10) + 7);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_2_in! ((1 * 10) + 7);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_3_in! ((1 * 10) + 7);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_4_in! ((1 * 10) + 7);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_5_in! ((1 * 10) + 7);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_6_in! ((1 * 10) + 7);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_7_in! ((1 * 10) + 7);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_8_in! ((1 * 10) + 7);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_7_9_in! ((1 * 10) + 7);
	to _response

from _loser
	case (0 <> 7) of
	true -> null
	end case;
	_ch_0_7_out? _m;
	to _loser_q

from _loser
	case (1 <> 7) of
	true -> null
	end case;
	_ch_1_7_out? _m;
	to _loser_q

from _loser
	case (2 <> 7) of
	true -> null
	end case;
	_ch_2_7_out? _m;
	to _loser_q

from _loser
	case (3 <> 7) of
	true -> null
	end case;
	_ch_3_7_out? _m;
	to _loser_q

from _loser
	case (4 <> 7) of
	true -> null
	end case;
	_ch_4_7_out? _m;
	to _loser_q

from _loser
	case (5 <> 7) of
	true -> null
	end case;
	_ch_5_7_out? _m;
	to _loser_q

from _loser
	case (6 <> 7) of
	true -> null
	end case;
	_ch_6_7_out? _m;
	to _loser_q

from _loser
	case (7 <> 7) of
	true -> null
	end case;
	_ch_7_7_out? _m;
	to _loser_q

from _loser
	case (8 <> 7) of
	true -> null
	end case;
	_ch_8_7_out? _m;
	to _loser_q

from _loser
	case (9 <> 7) of
	true -> null
	end case;
	_ch_9_7_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_8 [_ch_5_8_out: in none, _ch_2_8_out: in none, _ch_3_8_out: in none, _ch_6_8_out: in none, _ch_7_8_out: in none, _ch_9_8_out: in none, _ch_0_8_out: in none, _ch_1_8_out: in none, _ch_4_8_out: in none, _ch_8_8_out: in none, _ch_8_4_in: out none, _ch_8_7_in: out none, _ch_8_1_in: out none, _ch_8_5_in: out none, _ch_8_6_in: out none, _ch_8_9_in: out none, _ch_8_2_in: out none, _ch_8_3_in: out none, _ch_8_0_in: out none, _ch_8_8_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) = 1) and (_connected[((8 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((8 * 10) + 0)] + _connected[((8 * 10) + 1)]) + _connected[((8 * 10) + 2)]) + _connected[((8 * 10) + 3)]) + _connected[((8 * 10) + 4)]) + _connected[((8 * 10) + 5)]) + _connected[((8 * 10) + 6)]) + _connected[((8 * 10) + 7)]) + _connected[((8 * 10) + 8)]) + _connected[((8 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 8) of
	true -> null
	end case;
	_ch_0_8_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 8) of
	true -> null
	end case;
	_ch_1_8_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 8) of
	true -> null
	end case;
	_ch_2_8_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 8) of
	true -> null
	end case;
	_ch_3_8_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 8) of
	true -> null
	end case;
	_ch_4_8_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 8) of
	true -> null
	end case;
	_ch_5_8_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 8) of
	true -> null
	end case;
	_ch_6_8_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 8) of
	true -> null
	end case;
	_ch_7_8_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 8) of
	true -> null
	end case;
	_ch_8_8_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 8) of
	true -> null
	end case;
	_ch_9_8_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((8 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((8 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_0_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_1_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_2_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_3_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_4_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_5_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_6_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_7_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_8_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_8_9_in! ((2 * 10) + 8);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_8_0_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_8_1_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_8_2_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_8_3_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_8_4_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_8_5_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_8_6_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_8_7_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_8_8_in! ((1 * 10) + 8);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((8 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_8_9_in! ((1 * 10) + 8);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 8) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 8) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 8) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 8) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 8) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 8) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 8) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 8) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 8) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_8_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 8) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_8_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 8;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_8_0_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_8_1_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_8_2_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_8_3_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_8_4_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_8_5_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_8_6_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_8_7_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_8_8_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_8_9_in! ((1 * 10) + 8);
	to _response

from _found_partner
	case (0 <> 8) of
	true -> null
	end case;
	_ch_0_8_out? _m;
	to _found_q

from _found_partner
	case (1 <> 8) of
	true -> null
	end case;
	_ch_1_8_out? _m;
	to _found_q

from _found_partner
	case (2 <> 8) of
	true -> null
	end case;
	_ch_2_8_out? _m;
	to _found_q

from _found_partner
	case (3 <> 8) of
	true -> null
	end case;
	_ch_3_8_out? _m;
	to _found_q

from _found_partner
	case (4 <> 8) of
	true -> null
	end case;
	_ch_4_8_out? _m;
	to _found_q

from _found_partner
	case (5 <> 8) of
	true -> null
	end case;
	_ch_5_8_out? _m;
	to _found_q

from _found_partner
	case (6 <> 8) of
	true -> null
	end case;
	_ch_6_8_out? _m;
	to _found_q

from _found_partner
	case (7 <> 8) of
	true -> null
	end case;
	_ch_7_8_out? _m;
	to _found_q

from _found_partner
	case (8 <> 8) of
	true -> null
	end case;
	_ch_8_8_out? _m;
	to _found_q

from _found_partner
	case (9 <> 8) of
	true -> null
	end case;
	_ch_9_8_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 8) of
	true -> null
	end case;
	_ch_0_8_out? _m;
	to _response_q

from _response
	case (1 <> 8) of
	true -> null
	end case;
	_ch_1_8_out? _m;
	to _response_q

from _response
	case (2 <> 8) of
	true -> null
	end case;
	_ch_2_8_out? _m;
	to _response_q

from _response
	case (3 <> 8) of
	true -> null
	end case;
	_ch_3_8_out? _m;
	to _response_q

from _response
	case (4 <> 8) of
	true -> null
	end case;
	_ch_4_8_out? _m;
	to _response_q

from _response
	case (5 <> 8) of
	true -> null
	end case;
	_ch_5_8_out? _m;
	to _response_q

from _response
	case (6 <> 8) of
	true -> null
	end case;
	_ch_6_8_out? _m;
	to _response_q

from _response
	case (7 <> 8) of
	true -> null
	end case;
	_ch_7_8_out? _m;
	to _response_q

from _response
	case (8 <> 8) of
	true -> null
	end case;
	_ch_8_8_out? _m;
	to _response_q

from _response
	case (9 <> 8) of
	true -> null
	end case;
	_ch_9_8_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_0_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_1_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_2_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_3_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_4_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_5_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_6_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_7_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_8_in! ((3 * 10) + 8);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_9_in! ((3 * 10) + 8);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_0_in! ((1 * 10) + 8);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_1_in! ((1 * 10) + 8);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_2_in! ((1 * 10) + 8);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_3_in! ((1 * 10) + 8);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_4_in! ((1 * 10) + 8);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_5_in! ((1 * 10) + 8);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_6_in! ((1 * 10) + 8);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_7_in! ((1 * 10) + 8);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_8_in! ((1 * 10) + 8);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_8_9_in! ((1 * 10) + 8);
	to _response

from _loser
	case (0 <> 8) of
	true -> null
	end case;
	_ch_0_8_out? _m;
	to _loser_q

from _loser
	case (1 <> 8) of
	true -> null
	end case;
	_ch_1_8_out? _m;
	to _loser_q

from _loser
	case (2 <> 8) of
	true -> null
	end case;
	_ch_2_8_out? _m;
	to _loser_q

from _loser
	case (3 <> 8) of
	true -> null
	end case;
	_ch_3_8_out? _m;
	to _loser_q

from _loser
	case (4 <> 8) of
	true -> null
	end case;
	_ch_4_8_out? _m;
	to _loser_q

from _loser
	case (5 <> 8) of
	true -> null
	end case;
	_ch_5_8_out? _m;
	to _loser_q

from _loser
	case (6 <> 8) of
	true -> null
	end case;
	_ch_6_8_out? _m;
	to _loser_q

from _loser
	case (7 <> 8) of
	true -> null
	end case;
	_ch_7_8_out? _m;
	to _loser_q

from _loser
	case (8 <> 8) of
	true -> null
	end case;
	_ch_8_8_out? _m;
	to _loser_q

from _loser
	case (9 <> 8) of
	true -> null
	end case;
	_ch_9_8_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _Node_9 [_ch_1_9_out: in none, _ch_9_9_out: in none, _ch_2_9_out: in none, _ch_6_9_out: in none, _ch_3_9_out: in none, _ch_7_9_out: in none, _ch_4_9_out: in none, _ch_5_9_out: in none, _ch_8_9_out: in none, _ch_0_9_out: in none, _ch_9_4_in: out none, _ch_9_9_in: out none, _ch_9_3_in: out none, _ch_9_1_in: out none, _ch_9_7_in: out none, _ch_9_8_in: out none, _ch_9_6_in: out none, _ch_9_5_in: out none, _ch_9_0_in: out none, _ch_9_2_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 100 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 10 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 0)] <> 0)) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 1)] <> 0)) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 2)] <> 0)) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 3)] <> 0)) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 4)] <> 0)) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 5)] <> 0)) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 6)] <> 0)) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 7)] <> 0)) of
	true -> null
	end case;
	_j := 7;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 8)] <> 0)) of
	true -> null
	end case;
	_j := 8;
	to _found_partner

from _start
	case (((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) = 1) and (_connected[((9 * 10) + 9)] <> 0)) of
	true -> null
	end case;
	_j := 9;
	to _found_partner

from _start
	case ((((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]) > 1) of
	true -> null
	end case;
	_n := (((((((((_connected[((9 * 10) + 0)] + _connected[((9 * 10) + 1)]) + _connected[((9 * 10) + 2)]) + _connected[((9 * 10) + 3)]) + _connected[((9 * 10) + 4)]) + _connected[((9 * 10) + 5)]) + _connected[((9 * 10) + 6)]) + _connected[((9 * 10) + 7)]) + _connected[((9 * 10) + 8)]) + _connected[((9 * 10) + 9)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 9) of
	true -> null
	end case;
	_ch_0_9_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 9) of
	true -> null
	end case;
	_ch_1_9_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 9) of
	true -> null
	end case;
	_ch_2_9_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 9) of
	true -> null
	end case;
	_ch_3_9_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 9) of
	true -> null
	end case;
	_ch_4_9_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 9) of
	true -> null
	end case;
	_ch_5_9_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 9) of
	true -> null
	end case;
	_ch_6_9_out? _m;
	to _wait_q

from _wait_for_request
	case (7 <> 9) of
	true -> null
	end case;
	_ch_7_9_out? _m;
	to _wait_q

from _wait_for_request
	case (8 <> 9) of
	true -> null
	end case;
	_ch_8_9_out? _m;
	to _wait_q

from _wait_for_request
	case (9 <> 9) of
	true -> null
	end case;
	_ch_9_9_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 10) <> 1) or (not (_connected[((9 * 10) + (_m % 10))] <> 0))) or (_received[(_m % 10)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 10) = 1) and (_connected[((9 * 10) + (_m % 10))] <> 0)) and (_received[(_m % 10)] = 0)) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 10) and (not (_received[_j] <> 0))) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_0_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_1_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_2_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_3_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_4_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_5_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_6_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((7 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_7_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((8 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_8_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((9 = _j) and (_received[_j] <> 0)) of
	true -> null
	end case;
	_ch_9_9_in! ((2 * 10) + 9);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 10)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 0)] <> 0)) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_9_0_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 1)] <> 0)) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_9_1_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 2)] <> 0)) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_9_2_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 3)] <> 0)) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_9_3_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 4)] <> 0)) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_9_4_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 5)] <> 0)) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_9_5_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 6)] <> 0)) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_9_6_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 7)] <> 0)) and (_received[7] = 0)) of
	true -> null
	end case;
	_ch_9_7_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 8)] <> 0)) and (_received[8] = 0)) of
	true -> null
	end case;
	_ch_9_8_in! ((1 * 10) + 9);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 10)) and (_connected[((9 * 10) + 9)] <> 0)) and (_received[9] = 0)) of
	true -> null
	end case;
	_ch_9_9_in! ((1 * 10) + 9);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 9) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 9) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 9) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 9) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 9) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 9) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 9) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((7 <> 9) and (_received[7] = 1)) of
	true -> null
	end case;
	_ch_7_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((8 <> 9) and (_received[8] = 1)) of
	true -> null
	end case;
	_ch_8_9_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((9 <> 9) and (_received[9] = 1)) of
	true -> null
	end case;
	_ch_9_9_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 10) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 10) = 3) of
	true -> null
	end case;
	_received[(_m % 10)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case ((((((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) + _received[7]) + _received[8]) + _received[9]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 9;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_9_0_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_9_1_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_9_2_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_9_3_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_9_4_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_9_5_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_9_6_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (7 = _j) of
	true -> null
	end case;
	_ch_9_7_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (8 = _j) of
	true -> null
	end case;
	_ch_9_8_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (9 = _j) of
	true -> null
	end case;
	_ch_9_9_in! ((1 * 10) + 9);
	to _response

from _found_partner
	case (0 <> 9) of
	true -> null
	end case;
	_ch_0_9_out? _m;
	to _found_q

from _found_partner
	case (1 <> 9) of
	true -> null
	end case;
	_ch_1_9_out? _m;
	to _found_q

from _found_partner
	case (2 <> 9) of
	true -> null
	end case;
	_ch_2_9_out? _m;
	to _found_q

from _found_partner
	case (3 <> 9) of
	true -> null
	end case;
	_ch_3_9_out? _m;
	to _found_q

from _found_partner
	case (4 <> 9) of
	true -> null
	end case;
	_ch_4_9_out? _m;
	to _found_q

from _found_partner
	case (5 <> 9) of
	true -> null
	end case;
	_ch_5_9_out? _m;
	to _found_q

from _found_partner
	case (6 <> 9) of
	true -> null
	end case;
	_ch_6_9_out? _m;
	to _found_q

from _found_partner
	case (7 <> 9) of
	true -> null
	end case;
	_ch_7_9_out? _m;
	to _found_q

from _found_partner
	case (8 <> 9) of
	true -> null
	end case;
	_ch_8_9_out? _m;
	to _found_q

from _found_partner
	case (9 <> 9) of
	true -> null
	end case;
	_ch_9_9_out? _m;
	to _found_q

from _found_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 10) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 9) of
	true -> null
	end case;
	_ch_0_9_out? _m;
	to _response_q

from _response
	case (1 <> 9) of
	true -> null
	end case;
	_ch_1_9_out? _m;
	to _response_q

from _response
	case (2 <> 9) of
	true -> null
	end case;
	_ch_2_9_out? _m;
	to _response_q

from _response
	case (3 <> 9) of
	true -> null
	end case;
	_ch_3_9_out? _m;
	to _response_q

from _response
	case (4 <> 9) of
	true -> null
	end case;
	_ch_4_9_out? _m;
	to _response_q

from _response
	case (5 <> 9) of
	true -> null
	end case;
	_ch_5_9_out? _m;
	to _response_q

from _response
	case (6 <> 9) of
	true -> null
	end case;
	_ch_6_9_out? _m;
	to _response_q

from _response
	case (7 <> 9) of
	true -> null
	end case;
	_ch_7_9_out? _m;
	to _response_q

from _response
	case (8 <> 9) of
	true -> null
	end case;
	_ch_8_9_out? _m;
	to _response_q

from _response
	case (9 <> 9) of
	true -> null
	end case;
	_ch_9_9_out? _m;
	to _response_q

from _response_q
	case ((_m / 10) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_0_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_1_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_2_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_3_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_4_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_5_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_6_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_7_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_8_in! ((3 * 10) + 9);
	to _finish

from _become_child
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_9_in! ((3 * 10) + 9);
	to _finish

from _response_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_0_in! ((1 * 10) + 9);
	to _response

from _winner
	case (1 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_1_in! ((1 * 10) + 9);
	to _response

from _winner
	case (2 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_2_in! ((1 * 10) + 9);
	to _response

from _winner
	case (3 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_3_in! ((1 * 10) + 9);
	to _response

from _winner
	case (4 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_4_in! ((1 * 10) + 9);
	to _response

from _winner
	case (5 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_5_in! ((1 * 10) + 9);
	to _response

from _winner
	case (6 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_6_in! ((1 * 10) + 9);
	to _response

from _winner
	case (7 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_7_in! ((1 * 10) + 9);
	to _response

from _winner
	case (8 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_8_in! ((1 * 10) + 9);
	to _response

from _winner
	case (9 = (_m % 10)) of
	true -> null
	end case;
	_ch_9_9_in! ((1 * 10) + 9);
	to _response

from _loser
	case (0 <> 9) of
	true -> null
	end case;
	_ch_0_9_out? _m;
	to _loser_q

from _loser
	case (1 <> 9) of
	true -> null
	end case;
	_ch_1_9_out? _m;
	to _loser_q

from _loser
	case (2 <> 9) of
	true -> null
	end case;
	_ch_2_9_out? _m;
	to _loser_q

from _loser
	case (3 <> 9) of
	true -> null
	end case;
	_ch_3_9_out? _m;
	to _loser_q

from _loser
	case (4 <> 9) of
	true -> null
	end case;
	_ch_4_9_out? _m;
	to _loser_q

from _loser
	case (5 <> 9) of
	true -> null
	end case;
	_ch_5_9_out? _m;
	to _loser_q

from _loser
	case (6 <> 9) of
	true -> null
	end case;
	_ch_6_9_out? _m;
	to _loser_q

from _loser
	case (7 <> 9) of
	true -> null
	end case;
	_ch_7_9_out? _m;
	to _loser_q

from _loser
	case (8 <> 9) of
	true -> null
	end case;
	_ch_8_9_out? _m;
	to _loser_q

from _loser
	case (9 <> 9) of
	true -> null
	end case;
	_ch_9_9_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 10) = 1) of
	true -> null
	end case;
	_received[(_m % 10)] := 1;
	_n := 1;
	to _child_handshake


process _channel_ch_0_0 [_ch_0_0_in: in none, _ch_0_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_0_in? _v;
	to _tr

from _tr
	_ch_0_0_out! _v;
	to _ready


process _channel_ch_1_0 [_ch_1_0_in: in none, _ch_1_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_0_in? _v;
	to _tr

from _tr
	_ch_1_0_out! _v;
	to _ready


process _channel_ch_2_0 [_ch_2_0_in: in none, _ch_2_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_0_in? _v;
	to _tr

from _tr
	_ch_2_0_out! _v;
	to _ready


process _channel_ch_3_0 [_ch_3_0_in: in none, _ch_3_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_0_in? _v;
	to _tr

from _tr
	_ch_3_0_out! _v;
	to _ready


process _channel_ch_4_0 [_ch_4_0_in: in none, _ch_4_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_0_in? _v;
	to _tr

from _tr
	_ch_4_0_out! _v;
	to _ready


process _channel_ch_5_0 [_ch_5_0_in: in none, _ch_5_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_0_in? _v;
	to _tr

from _tr
	_ch_5_0_out! _v;
	to _ready


process _channel_ch_6_0 [_ch_6_0_in: in none, _ch_6_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_0_in? _v;
	to _tr

from _tr
	_ch_6_0_out! _v;
	to _ready


process _channel_ch_7_0 [_ch_7_0_in: in none, _ch_7_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_0_in? _v;
	to _tr

from _tr
	_ch_7_0_out! _v;
	to _ready


process _channel_ch_8_0 [_ch_8_0_in: in none, _ch_8_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_0_in? _v;
	to _tr

from _tr
	_ch_8_0_out! _v;
	to _ready


process _channel_ch_9_0 [_ch_9_0_in: in none, _ch_9_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_0_in? _v;
	to _tr

from _tr
	_ch_9_0_out! _v;
	to _ready


process _channel_ch_0_1 [_ch_0_1_in: in none, _ch_0_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_1_in? _v;
	to _tr

from _tr
	_ch_0_1_out! _v;
	to _ready


process _channel_ch_1_1 [_ch_1_1_in: in none, _ch_1_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_1_in? _v;
	to _tr

from _tr
	_ch_1_1_out! _v;
	to _ready


process _channel_ch_2_1 [_ch_2_1_in: in none, _ch_2_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_1_in? _v;
	to _tr

from _tr
	_ch_2_1_out! _v;
	to _ready


process _channel_ch_3_1 [_ch_3_1_in: in none, _ch_3_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_1_in? _v;
	to _tr

from _tr
	_ch_3_1_out! _v;
	to _ready


process _channel_ch_4_1 [_ch_4_1_in: in none, _ch_4_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_1_in? _v;
	to _tr

from _tr
	_ch_4_1_out! _v;
	to _ready


process _channel_ch_5_1 [_ch_5_1_in: in none, _ch_5_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_1_in? _v;
	to _tr

from _tr
	_ch_5_1_out! _v;
	to _ready


process _channel_ch_6_1 [_ch_6_1_in: in none, _ch_6_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_1_in? _v;
	to _tr

from _tr
	_ch_6_1_out! _v;
	to _ready


process _channel_ch_7_1 [_ch_7_1_in: in none, _ch_7_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_1_in? _v;
	to _tr

from _tr
	_ch_7_1_out! _v;
	to _ready


process _channel_ch_8_1 [_ch_8_1_in: in none, _ch_8_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_1_in? _v;
	to _tr

from _tr
	_ch_8_1_out! _v;
	to _ready


process _channel_ch_9_1 [_ch_9_1_in: in none, _ch_9_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_1_in? _v;
	to _tr

from _tr
	_ch_9_1_out! _v;
	to _ready


process _channel_ch_0_2 [_ch_0_2_in: in none, _ch_0_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_2_in? _v;
	to _tr

from _tr
	_ch_0_2_out! _v;
	to _ready


process _channel_ch_1_2 [_ch_1_2_in: in none, _ch_1_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_2_in? _v;
	to _tr

from _tr
	_ch_1_2_out! _v;
	to _ready


process _channel_ch_2_2 [_ch_2_2_in: in none, _ch_2_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_2_in? _v;
	to _tr

from _tr
	_ch_2_2_out! _v;
	to _ready


process _channel_ch_3_2 [_ch_3_2_in: in none, _ch_3_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_2_in? _v;
	to _tr

from _tr
	_ch_3_2_out! _v;
	to _ready


process _channel_ch_4_2 [_ch_4_2_in: in none, _ch_4_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_2_in? _v;
	to _tr

from _tr
	_ch_4_2_out! _v;
	to _ready


process _channel_ch_5_2 [_ch_5_2_in: in none, _ch_5_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_2_in? _v;
	to _tr

from _tr
	_ch_5_2_out! _v;
	to _ready


process _channel_ch_6_2 [_ch_6_2_in: in none, _ch_6_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_2_in? _v;
	to _tr

from _tr
	_ch_6_2_out! _v;
	to _ready


process _channel_ch_7_2 [_ch_7_2_in: in none, _ch_7_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_2_in? _v;
	to _tr

from _tr
	_ch_7_2_out! _v;
	to _ready


process _channel_ch_8_2 [_ch_8_2_in: in none, _ch_8_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_2_in? _v;
	to _tr

from _tr
	_ch_8_2_out! _v;
	to _ready


process _channel_ch_9_2 [_ch_9_2_in: in none, _ch_9_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_2_in? _v;
	to _tr

from _tr
	_ch_9_2_out! _v;
	to _ready


process _channel_ch_0_3 [_ch_0_3_in: in none, _ch_0_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_3_in? _v;
	to _tr

from _tr
	_ch_0_3_out! _v;
	to _ready


process _channel_ch_1_3 [_ch_1_3_in: in none, _ch_1_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_3_in? _v;
	to _tr

from _tr
	_ch_1_3_out! _v;
	to _ready


process _channel_ch_2_3 [_ch_2_3_in: in none, _ch_2_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_3_in? _v;
	to _tr

from _tr
	_ch_2_3_out! _v;
	to _ready


process _channel_ch_3_3 [_ch_3_3_in: in none, _ch_3_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_3_in? _v;
	to _tr

from _tr
	_ch_3_3_out! _v;
	to _ready


process _channel_ch_4_3 [_ch_4_3_in: in none, _ch_4_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_3_in? _v;
	to _tr

from _tr
	_ch_4_3_out! _v;
	to _ready


process _channel_ch_5_3 [_ch_5_3_in: in none, _ch_5_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_3_in? _v;
	to _tr

from _tr
	_ch_5_3_out! _v;
	to _ready


process _channel_ch_6_3 [_ch_6_3_in: in none, _ch_6_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_3_in? _v;
	to _tr

from _tr
	_ch_6_3_out! _v;
	to _ready


process _channel_ch_7_3 [_ch_7_3_in: in none, _ch_7_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_3_in? _v;
	to _tr

from _tr
	_ch_7_3_out! _v;
	to _ready


process _channel_ch_8_3 [_ch_8_3_in: in none, _ch_8_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_3_in? _v;
	to _tr

from _tr
	_ch_8_3_out! _v;
	to _ready


process _channel_ch_9_3 [_ch_9_3_in: in none, _ch_9_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_3_in? _v;
	to _tr

from _tr
	_ch_9_3_out! _v;
	to _ready


process _channel_ch_0_4 [_ch_0_4_in: in none, _ch_0_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_4_in? _v;
	to _tr

from _tr
	_ch_0_4_out! _v;
	to _ready


process _channel_ch_1_4 [_ch_1_4_in: in none, _ch_1_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_4_in? _v;
	to _tr

from _tr
	_ch_1_4_out! _v;
	to _ready


process _channel_ch_2_4 [_ch_2_4_in: in none, _ch_2_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_4_in? _v;
	to _tr

from _tr
	_ch_2_4_out! _v;
	to _ready


process _channel_ch_3_4 [_ch_3_4_in: in none, _ch_3_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_4_in? _v;
	to _tr

from _tr
	_ch_3_4_out! _v;
	to _ready


process _channel_ch_4_4 [_ch_4_4_in: in none, _ch_4_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_4_in? _v;
	to _tr

from _tr
	_ch_4_4_out! _v;
	to _ready


process _channel_ch_5_4 [_ch_5_4_in: in none, _ch_5_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_4_in? _v;
	to _tr

from _tr
	_ch_5_4_out! _v;
	to _ready


process _channel_ch_6_4 [_ch_6_4_in: in none, _ch_6_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_4_in? _v;
	to _tr

from _tr
	_ch_6_4_out! _v;
	to _ready


process _channel_ch_7_4 [_ch_7_4_in: in none, _ch_7_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_4_in? _v;
	to _tr

from _tr
	_ch_7_4_out! _v;
	to _ready


process _channel_ch_8_4 [_ch_8_4_in: in none, _ch_8_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_4_in? _v;
	to _tr

from _tr
	_ch_8_4_out! _v;
	to _ready


process _channel_ch_9_4 [_ch_9_4_in: in none, _ch_9_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_4_in? _v;
	to _tr

from _tr
	_ch_9_4_out! _v;
	to _ready


process _channel_ch_0_5 [_ch_0_5_in: in none, _ch_0_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_5_in? _v;
	to _tr

from _tr
	_ch_0_5_out! _v;
	to _ready


process _channel_ch_1_5 [_ch_1_5_in: in none, _ch_1_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_5_in? _v;
	to _tr

from _tr
	_ch_1_5_out! _v;
	to _ready


process _channel_ch_2_5 [_ch_2_5_in: in none, _ch_2_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_5_in? _v;
	to _tr

from _tr
	_ch_2_5_out! _v;
	to _ready


process _channel_ch_3_5 [_ch_3_5_in: in none, _ch_3_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_5_in? _v;
	to _tr

from _tr
	_ch_3_5_out! _v;
	to _ready


process _channel_ch_4_5 [_ch_4_5_in: in none, _ch_4_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_5_in? _v;
	to _tr

from _tr
	_ch_4_5_out! _v;
	to _ready


process _channel_ch_5_5 [_ch_5_5_in: in none, _ch_5_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_5_in? _v;
	to _tr

from _tr
	_ch_5_5_out! _v;
	to _ready


process _channel_ch_6_5 [_ch_6_5_in: in none, _ch_6_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_5_in? _v;
	to _tr

from _tr
	_ch_6_5_out! _v;
	to _ready


process _channel_ch_7_5 [_ch_7_5_in: in none, _ch_7_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_5_in? _v;
	to _tr

from _tr
	_ch_7_5_out! _v;
	to _ready


process _channel_ch_8_5 [_ch_8_5_in: in none, _ch_8_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_5_in? _v;
	to _tr

from _tr
	_ch_8_5_out! _v;
	to _ready


process _channel_ch_9_5 [_ch_9_5_in: in none, _ch_9_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_5_in? _v;
	to _tr

from _tr
	_ch_9_5_out! _v;
	to _ready


process _channel_ch_0_6 [_ch_0_6_in: in none, _ch_0_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_6_in? _v;
	to _tr

from _tr
	_ch_0_6_out! _v;
	to _ready


process _channel_ch_1_6 [_ch_1_6_in: in none, _ch_1_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_6_in? _v;
	to _tr

from _tr
	_ch_1_6_out! _v;
	to _ready


process _channel_ch_2_6 [_ch_2_6_in: in none, _ch_2_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_6_in? _v;
	to _tr

from _tr
	_ch_2_6_out! _v;
	to _ready


process _channel_ch_3_6 [_ch_3_6_in: in none, _ch_3_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_6_in? _v;
	to _tr

from _tr
	_ch_3_6_out! _v;
	to _ready


process _channel_ch_4_6 [_ch_4_6_in: in none, _ch_4_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_6_in? _v;
	to _tr

from _tr
	_ch_4_6_out! _v;
	to _ready


process _channel_ch_5_6 [_ch_5_6_in: in none, _ch_5_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_6_in? _v;
	to _tr

from _tr
	_ch_5_6_out! _v;
	to _ready


process _channel_ch_6_6 [_ch_6_6_in: in none, _ch_6_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_6_in? _v;
	to _tr

from _tr
	_ch_6_6_out! _v;
	to _ready


process _channel_ch_7_6 [_ch_7_6_in: in none, _ch_7_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_6_in? _v;
	to _tr

from _tr
	_ch_7_6_out! _v;
	to _ready


process _channel_ch_8_6 [_ch_8_6_in: in none, _ch_8_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_6_in? _v;
	to _tr

from _tr
	_ch_8_6_out! _v;
	to _ready


process _channel_ch_9_6 [_ch_9_6_in: in none, _ch_9_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_6_in? _v;
	to _tr

from _tr
	_ch_9_6_out! _v;
	to _ready


process _channel_ch_0_7 [_ch_0_7_in: in none, _ch_0_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_7_in? _v;
	to _tr

from _tr
	_ch_0_7_out! _v;
	to _ready


process _channel_ch_1_7 [_ch_1_7_in: in none, _ch_1_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_7_in? _v;
	to _tr

from _tr
	_ch_1_7_out! _v;
	to _ready


process _channel_ch_2_7 [_ch_2_7_in: in none, _ch_2_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_7_in? _v;
	to _tr

from _tr
	_ch_2_7_out! _v;
	to _ready


process _channel_ch_3_7 [_ch_3_7_in: in none, _ch_3_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_7_in? _v;
	to _tr

from _tr
	_ch_3_7_out! _v;
	to _ready


process _channel_ch_4_7 [_ch_4_7_in: in none, _ch_4_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_7_in? _v;
	to _tr

from _tr
	_ch_4_7_out! _v;
	to _ready


process _channel_ch_5_7 [_ch_5_7_in: in none, _ch_5_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_7_in? _v;
	to _tr

from _tr
	_ch_5_7_out! _v;
	to _ready


process _channel_ch_6_7 [_ch_6_7_in: in none, _ch_6_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_7_in? _v;
	to _tr

from _tr
	_ch_6_7_out! _v;
	to _ready


process _channel_ch_7_7 [_ch_7_7_in: in none, _ch_7_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_7_in? _v;
	to _tr

from _tr
	_ch_7_7_out! _v;
	to _ready


process _channel_ch_8_7 [_ch_8_7_in: in none, _ch_8_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_7_in? _v;
	to _tr

from _tr
	_ch_8_7_out! _v;
	to _ready


process _channel_ch_9_7 [_ch_9_7_in: in none, _ch_9_7_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_7_in? _v;
	to _tr

from _tr
	_ch_9_7_out! _v;
	to _ready


process _channel_ch_0_8 [_ch_0_8_in: in none, _ch_0_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_8_in? _v;
	to _tr

from _tr
	_ch_0_8_out! _v;
	to _ready


process _channel_ch_1_8 [_ch_1_8_in: in none, _ch_1_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_8_in? _v;
	to _tr

from _tr
	_ch_1_8_out! _v;
	to _ready


process _channel_ch_2_8 [_ch_2_8_in: in none, _ch_2_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_8_in? _v;
	to _tr

from _tr
	_ch_2_8_out! _v;
	to _ready


process _channel_ch_3_8 [_ch_3_8_in: in none, _ch_3_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_8_in? _v;
	to _tr

from _tr
	_ch_3_8_out! _v;
	to _ready


process _channel_ch_4_8 [_ch_4_8_in: in none, _ch_4_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_8_in? _v;
	to _tr

from _tr
	_ch_4_8_out! _v;
	to _ready


process _channel_ch_5_8 [_ch_5_8_in: in none, _ch_5_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_8_in? _v;
	to _tr

from _tr
	_ch_5_8_out! _v;
	to _ready


process _channel_ch_6_8 [_ch_6_8_in: in none, _ch_6_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_8_in? _v;
	to _tr

from _tr
	_ch_6_8_out! _v;
	to _ready


process _channel_ch_7_8 [_ch_7_8_in: in none, _ch_7_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_8_in? _v;
	to _tr

from _tr
	_ch_7_8_out! _v;
	to _ready


process _channel_ch_8_8 [_ch_8_8_in: in none, _ch_8_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_8_in? _v;
	to _tr

from _tr
	_ch_8_8_out! _v;
	to _ready


process _channel_ch_9_8 [_ch_9_8_in: in none, _ch_9_8_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_8_in? _v;
	to _tr

from _tr
	_ch_9_8_out! _v;
	to _ready


process _channel_ch_0_9 [_ch_0_9_in: in none, _ch_0_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_9_in? _v;
	to _tr

from _tr
	_ch_0_9_out! _v;
	to _ready


process _channel_ch_1_9 [_ch_1_9_in: in none, _ch_1_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_9_in? _v;
	to _tr

from _tr
	_ch_1_9_out! _v;
	to _ready


process _channel_ch_2_9 [_ch_2_9_in: in none, _ch_2_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_9_in? _v;
	to _tr

from _tr
	_ch_2_9_out! _v;
	to _ready


process _channel_ch_3_9 [_ch_3_9_in: in none, _ch_3_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_9_in? _v;
	to _tr

from _tr
	_ch_3_9_out! _v;
	to _ready


process _channel_ch_4_9 [_ch_4_9_in: in none, _ch_4_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_9_in? _v;
	to _tr

from _tr
	_ch_4_9_out! _v;
	to _ready


process _channel_ch_5_9 [_ch_5_9_in: in none, _ch_5_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_9_in? _v;
	to _tr

from _tr
	_ch_5_9_out! _v;
	to _ready


process _channel_ch_6_9 [_ch_6_9_in: in none, _ch_6_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_9_in? _v;
	to _tr

from _tr
	_ch_6_9_out! _v;
	to _ready


process _channel_ch_7_9 [_ch_7_9_in: in none, _ch_7_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_7_9_in? _v;
	to _tr

from _tr
	_ch_7_9_out! _v;
	to _ready


process _channel_ch_8_9 [_ch_8_9_in: in none, _ch_8_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_8_9_in? _v;
	to _tr

from _tr
	_ch_8_9_out! _v;
	to _ready


process _channel_ch_9_9 [_ch_9_9_in: in none, _ch_9_9_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_9_9_in? _v;
	to _tr

from _tr
	_ch_9_9_out! _v;
	to _ready


component sys is
var 
	
	_connected: array 100 of byte := [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], 
	
	_toss: byte, 
	
	_elected: byte := 10, 
	
	_elected_num: byte := 0

port 
	_ch_0_0_in: none, 
	_ch_0_0_out: none, 
	_ch_1_0_in: none, 
	_ch_1_0_out: none, 
	_ch_2_0_in: none, 
	_ch_2_0_out: none, 
	_ch_3_0_in: none, 
	_ch_3_0_out: none, 
	_ch_4_0_in: none, 
	_ch_4_0_out: none, 
	_ch_5_0_in: none, 
	_ch_5_0_out: none, 
	_ch_6_0_in: none, 
	_ch_6_0_out: none, 
	_ch_7_0_in: none, 
	_ch_7_0_out: none, 
	_ch_8_0_in: none, 
	_ch_8_0_out: none, 
	_ch_9_0_in: none, 
	_ch_9_0_out: none, 
	_ch_0_1_in: none, 
	_ch_0_1_out: none, 
	_ch_1_1_in: none, 
	_ch_1_1_out: none, 
	_ch_2_1_in: none, 
	_ch_2_1_out: none, 
	_ch_3_1_in: none, 
	_ch_3_1_out: none, 
	_ch_4_1_in: none, 
	_ch_4_1_out: none, 
	_ch_5_1_in: none, 
	_ch_5_1_out: none, 
	_ch_6_1_in: none, 
	_ch_6_1_out: none, 
	_ch_7_1_in: none, 
	_ch_7_1_out: none, 
	_ch_8_1_in: none, 
	_ch_8_1_out: none, 
	_ch_9_1_in: none, 
	_ch_9_1_out: none, 
	_ch_0_2_in: none, 
	_ch_0_2_out: none, 
	_ch_1_2_in: none, 
	_ch_1_2_out: none, 
	_ch_2_2_in: none, 
	_ch_2_2_out: none, 
	_ch_3_2_in: none, 
	_ch_3_2_out: none, 
	_ch_4_2_in: none, 
	_ch_4_2_out: none, 
	_ch_5_2_in: none, 
	_ch_5_2_out: none, 
	_ch_6_2_in: none, 
	_ch_6_2_out: none, 
	_ch_7_2_in: none, 
	_ch_7_2_out: none, 
	_ch_8_2_in: none, 
	_ch_8_2_out: none, 
	_ch_9_2_in: none, 
	_ch_9_2_out: none, 
	_ch_0_3_in: none, 
	_ch_0_3_out: none, 
	_ch_1_3_in: none, 
	_ch_1_3_out: none, 
	_ch_2_3_in: none, 
	_ch_2_3_out: none, 
	_ch_3_3_in: none, 
	_ch_3_3_out: none, 
	_ch_4_3_in: none, 
	_ch_4_3_out: none, 
	_ch_5_3_in: none, 
	_ch_5_3_out: none, 
	_ch_6_3_in: none, 
	_ch_6_3_out: none, 
	_ch_7_3_in: none, 
	_ch_7_3_out: none, 
	_ch_8_3_in: none, 
	_ch_8_3_out: none, 
	_ch_9_3_in: none, 
	_ch_9_3_out: none, 
	_ch_0_4_in: none, 
	_ch_0_4_out: none, 
	_ch_1_4_in: none, 
	_ch_1_4_out: none, 
	_ch_2_4_in: none, 
	_ch_2_4_out: none, 
	_ch_3_4_in: none, 
	_ch_3_4_out: none, 
	_ch_4_4_in: none, 
	_ch_4_4_out: none, 
	_ch_5_4_in: none, 
	_ch_5_4_out: none, 
	_ch_6_4_in: none, 
	_ch_6_4_out: none, 
	_ch_7_4_in: none, 
	_ch_7_4_out: none, 
	_ch_8_4_in: none, 
	_ch_8_4_out: none, 
	_ch_9_4_in: none, 
	_ch_9_4_out: none, 
	_ch_0_5_in: none, 
	_ch_0_5_out: none, 
	_ch_1_5_in: none, 
	_ch_1_5_out: none, 
	_ch_2_5_in: none, 
	_ch_2_5_out: none, 
	_ch_3_5_in: none, 
	_ch_3_5_out: none, 
	_ch_4_5_in: none, 
	_ch_4_5_out: none, 
	_ch_5_5_in: none, 
	_ch_5_5_out: none, 
	_ch_6_5_in: none, 
	_ch_6_5_out: none, 
	_ch_7_5_in: none, 
	_ch_7_5_out: none, 
	_ch_8_5_in: none, 
	_ch_8_5_out: none, 
	_ch_9_5_in: none, 
	_ch_9_5_out: none, 
	_ch_0_6_in: none, 
	_ch_0_6_out: none, 
	_ch_1_6_in: none, 
	_ch_1_6_out: none, 
	_ch_2_6_in: none, 
	_ch_2_6_out: none, 
	_ch_3_6_in: none, 
	_ch_3_6_out: none, 
	_ch_4_6_in: none, 
	_ch_4_6_out: none, 
	_ch_5_6_in: none, 
	_ch_5_6_out: none, 
	_ch_6_6_in: none, 
	_ch_6_6_out: none, 
	_ch_7_6_in: none, 
	_ch_7_6_out: none, 
	_ch_8_6_in: none, 
	_ch_8_6_out: none, 
	_ch_9_6_in: none, 
	_ch_9_6_out: none, 
	_ch_0_7_in: none, 
	_ch_0_7_out: none, 
	_ch_1_7_in: none, 
	_ch_1_7_out: none, 
	_ch_2_7_in: none, 
	_ch_2_7_out: none, 
	_ch_3_7_in: none, 
	_ch_3_7_out: none, 
	_ch_4_7_in: none, 
	_ch_4_7_out: none, 
	_ch_5_7_in: none, 
	_ch_5_7_out: none, 
	_ch_6_7_in: none, 
	_ch_6_7_out: none, 
	_ch_7_7_in: none, 
	_ch_7_7_out: none, 
	_ch_8_7_in: none, 
	_ch_8_7_out: none, 
	_ch_9_7_in: none, 
	_ch_9_7_out: none, 
	_ch_0_8_in: none, 
	_ch_0_8_out: none, 
	_ch_1_8_in: none, 
	_ch_1_8_out: none, 
	_ch_2_8_in: none, 
	_ch_2_8_out: none, 
	_ch_3_8_in: none, 
	_ch_3_8_out: none, 
	_ch_4_8_in: none, 
	_ch_4_8_out: none, 
	_ch_5_8_in: none, 
	_ch_5_8_out: none, 
	_ch_6_8_in: none, 
	_ch_6_8_out: none, 
	_ch_7_8_in: none, 
	_ch_7_8_out: none, 
	_ch_8_8_in: none, 
	_ch_8_8_out: none, 
	_ch_9_8_in: none, 
	_ch_9_8_out: none, 
	_ch_0_9_in: none, 
	_ch_0_9_out: none, 
	_ch_1_9_in: none, 
	_ch_1_9_out: none, 
	_ch_2_9_in: none, 
	_ch_2_9_out: none, 
	_ch_3_9_in: none, 
	_ch_3_9_out: none, 
	_ch_4_9_in: none, 
	_ch_4_9_out: none, 
	_ch_5_9_in: none, 
	_ch_5_9_out: none, 
	_ch_6_9_in: none, 
	_ch_6_9_out: none, 
	_ch_7_9_in: none, 
	_ch_7_9_out: none, 
	_ch_8_9_in: none, 
	_ch_8_9_out: none, 
	_ch_9_9_in: none, 
	_ch_9_9_out: none

par 
	_Node_0[_ch_2_0_out, _ch_4_0_out, _ch_8_0_out, _ch_5_0_out, _ch_3_0_out, _ch_6_0_out, _ch_7_0_out, _ch_9_0_out, _ch_0_0_out, _ch_1_0_out, _ch_0_8_in, _ch_0_7_in, _ch_0_6_in, _ch_0_9_in, _ch_0_5_in, _ch_0_0_in, _ch_0_3_in, _ch_0_1_in, _ch_0_2_in, _ch_0_4_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_1[_ch_2_1_out, _ch_5_1_out, _ch_6_1_out, _ch_0_1_out, _ch_9_1_out, _ch_3_1_out, _ch_1_1_out, _ch_8_1_out, _ch_4_1_out, _ch_7_1_out, _ch_1_1_in, _ch_1_5_in, _ch_1_6_in, _ch_1_0_in, _ch_1_2_in, _ch_1_4_in, _ch_1_9_in, _ch_1_7_in, _ch_1_3_in, _ch_1_8_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_2[_ch_4_2_out, _ch_2_2_out, _ch_8_2_out, _ch_5_2_out, _ch_9_2_out, _ch_1_2_out, _ch_3_2_out, _ch_0_2_out, _ch_7_2_out, _ch_6_2_out, _ch_2_1_in, _ch_2_3_in, _ch_2_5_in, _ch_2_7_in, _ch_2_8_in, _ch_2_2_in, _ch_2_4_in, _ch_2_0_in, _ch_2_6_in, _ch_2_9_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_3[_ch_2_3_out, _ch_6_3_out, _ch_8_3_out, _ch_5_3_out, _ch_7_3_out, _ch_0_3_out, _ch_4_3_out, _ch_9_3_out, _ch_1_3_out, _ch_3_3_out, _ch_3_8_in, _ch_3_0_in, _ch_3_5_in, _ch_3_1_in, _ch_3_2_in, _ch_3_6_in, _ch_3_4_in, _ch_3_3_in, _ch_3_7_in, _ch_3_9_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_4[_ch_3_4_out, _ch_5_4_out, _ch_7_4_out, _ch_1_4_out, _ch_2_4_out, _ch_4_4_out, _ch_6_4_out, _ch_0_4_out, _ch_8_4_out, _ch_9_4_out, _ch_4_5_in, _ch_4_1_in, _ch_4_7_in, _ch_4_4_in, _ch_4_8_in, _ch_4_3_in, _ch_4_9_in, _ch_4_0_in, _ch_4_6_in, _ch_4_2_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_5[_ch_3_5_out, _ch_7_5_out, _ch_8_5_out, _ch_4_5_out, _ch_1_5_out, _ch_5_5_out, _ch_6_5_out, _ch_0_5_out, _ch_2_5_out, _ch_9_5_out, _ch_5_8_in, _ch_5_0_in, _ch_5_2_in, _ch_5_1_in, _ch_5_5_in, _ch_5_4_in, _ch_5_9_in, _ch_5_3_in, _ch_5_6_in, _ch_5_7_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_6[_ch_9_6_out, _ch_1_6_out, _ch_7_6_out, _ch_2_6_out, _ch_3_6_out, _ch_4_6_out, _ch_0_6_out, _ch_5_6_out, _ch_8_6_out, _ch_6_6_out, _ch_6_8_in, _ch_6_6_in, _ch_6_4_in, _ch_6_9_in, _ch_6_1_in, _ch_6_0_in, _ch_6_5_in, _ch_6_7_in, _ch_6_3_in, _ch_6_2_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_7[_ch_1_7_out, _ch_8_7_out, _ch_4_7_out, _ch_0_7_out, _ch_2_7_out, _ch_7_7_out, _ch_6_7_out, _ch_3_7_out, _ch_9_7_out, _ch_5_7_out, _ch_7_3_in, _ch_7_2_in, _ch_7_0_in, _ch_7_4_in, _ch_7_5_in, _ch_7_7_in, _ch_7_8_in, _ch_7_6_in, _ch_7_9_in, _ch_7_1_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_8[_ch_5_8_out, _ch_2_8_out, _ch_3_8_out, _ch_6_8_out, _ch_7_8_out, _ch_9_8_out, _ch_0_8_out, _ch_1_8_out, _ch_4_8_out, _ch_8_8_out, _ch_8_4_in, _ch_8_7_in, _ch_8_1_in, _ch_8_5_in, _ch_8_6_in, _ch_8_9_in, _ch_8_2_in, _ch_8_3_in, _ch_8_0_in, _ch_8_8_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_9[_ch_1_9_out, _ch_9_9_out, _ch_2_9_out, _ch_6_9_out, _ch_3_9_out, _ch_7_9_out, _ch_4_9_out, _ch_5_9_out, _ch_8_9_out, _ch_0_9_out, _ch_9_4_in, _ch_9_9_in, _ch_9_3_in, _ch_9_1_in, _ch_9_7_in, _ch_9_8_in, _ch_9_6_in, _ch_9_5_in, _ch_9_0_in, _ch_9_2_in] (&_toss, &_elected_num, &_connected, &_elected) 
	 || _channel_ch_0_0[_ch_0_0_in, _ch_0_0_out] 
	 || _channel_ch_1_0[_ch_1_0_in, _ch_1_0_out] 
	 || _channel_ch_2_0[_ch_2_0_in, _ch_2_0_out] 
	 || _channel_ch_3_0[_ch_3_0_in, _ch_3_0_out] 
	 || _channel_ch_4_0[_ch_4_0_in, _ch_4_0_out] 
	 || _channel_ch_5_0[_ch_5_0_in, _ch_5_0_out] 
	 || _channel_ch_6_0[_ch_6_0_in, _ch_6_0_out] 
	 || _channel_ch_7_0[_ch_7_0_in, _ch_7_0_out] 
	 || _channel_ch_8_0[_ch_8_0_in, _ch_8_0_out] 
	 || _channel_ch_9_0[_ch_9_0_in, _ch_9_0_out] 
	 || _channel_ch_0_1[_ch_0_1_in, _ch_0_1_out] 
	 || _channel_ch_1_1[_ch_1_1_in, _ch_1_1_out] 
	 || _channel_ch_2_1[_ch_2_1_in, _ch_2_1_out] 
	 || _channel_ch_3_1[_ch_3_1_in, _ch_3_1_out] 
	 || _channel_ch_4_1[_ch_4_1_in, _ch_4_1_out] 
	 || _channel_ch_5_1[_ch_5_1_in, _ch_5_1_out] 
	 || _channel_ch_6_1[_ch_6_1_in, _ch_6_1_out] 
	 || _channel_ch_7_1[_ch_7_1_in, _ch_7_1_out] 
	 || _channel_ch_8_1[_ch_8_1_in, _ch_8_1_out] 
	 || _channel_ch_9_1[_ch_9_1_in, _ch_9_1_out] 
	 || _channel_ch_0_2[_ch_0_2_in, _ch_0_2_out] 
	 || _channel_ch_1_2[_ch_1_2_in, _ch_1_2_out] 
	 || _channel_ch_2_2[_ch_2_2_in, _ch_2_2_out] 
	 || _channel_ch_3_2[_ch_3_2_in, _ch_3_2_out] 
	 || _channel_ch_4_2[_ch_4_2_in, _ch_4_2_out] 
	 || _channel_ch_5_2[_ch_5_2_in, _ch_5_2_out] 
	 || _channel_ch_6_2[_ch_6_2_in, _ch_6_2_out] 
	 || _channel_ch_7_2[_ch_7_2_in, _ch_7_2_out] 
	 || _channel_ch_8_2[_ch_8_2_in, _ch_8_2_out] 
	 || _channel_ch_9_2[_ch_9_2_in, _ch_9_2_out] 
	 || _channel_ch_0_3[_ch_0_3_in, _ch_0_3_out] 
	 || _channel_ch_1_3[_ch_1_3_in, _ch_1_3_out] 
	 || _channel_ch_2_3[_ch_2_3_in, _ch_2_3_out] 
	 || _channel_ch_3_3[_ch_3_3_in, _ch_3_3_out] 
	 || _channel_ch_4_3[_ch_4_3_in, _ch_4_3_out] 
	 || _channel_ch_5_3[_ch_5_3_in, _ch_5_3_out] 
	 || _channel_ch_6_3[_ch_6_3_in, _ch_6_3_out] 
	 || _channel_ch_7_3[_ch_7_3_in, _ch_7_3_out] 
	 || _channel_ch_8_3[_ch_8_3_in, _ch_8_3_out] 
	 || _channel_ch_9_3[_ch_9_3_in, _ch_9_3_out] 
	 || _channel_ch_0_4[_ch_0_4_in, _ch_0_4_out] 
	 || _channel_ch_1_4[_ch_1_4_in, _ch_1_4_out] 
	 || _channel_ch_2_4[_ch_2_4_in, _ch_2_4_out] 
	 || _channel_ch_3_4[_ch_3_4_in, _ch_3_4_out] 
	 || _channel_ch_4_4[_ch_4_4_in, _ch_4_4_out] 
	 || _channel_ch_5_4[_ch_5_4_in, _ch_5_4_out] 
	 || _channel_ch_6_4[_ch_6_4_in, _ch_6_4_out] 
	 || _channel_ch_7_4[_ch_7_4_in, _ch_7_4_out] 
	 || _channel_ch_8_4[_ch_8_4_in, _ch_8_4_out] 
	 || _channel_ch_9_4[_ch_9_4_in, _ch_9_4_out] 
	 || _channel_ch_0_5[_ch_0_5_in, _ch_0_5_out] 
	 || _channel_ch_1_5[_ch_1_5_in, _ch_1_5_out] 
	 || _channel_ch_2_5[_ch_2_5_in, _ch_2_5_out] 
	 || _channel_ch_3_5[_ch_3_5_in, _ch_3_5_out] 
	 || _channel_ch_4_5[_ch_4_5_in, _ch_4_5_out] 
	 || _channel_ch_5_5[_ch_5_5_in, _ch_5_5_out] 
	 || _channel_ch_6_5[_ch_6_5_in, _ch_6_5_out] 
	 || _channel_ch_7_5[_ch_7_5_in, _ch_7_5_out] 
	 || _channel_ch_8_5[_ch_8_5_in, _ch_8_5_out] 
	 || _channel_ch_9_5[_ch_9_5_in, _ch_9_5_out] 
	 || _channel_ch_0_6[_ch_0_6_in, _ch_0_6_out] 
	 || _channel_ch_1_6[_ch_1_6_in, _ch_1_6_out] 
	 || _channel_ch_2_6[_ch_2_6_in, _ch_2_6_out] 
	 || _channel_ch_3_6[_ch_3_6_in, _ch_3_6_out] 
	 || _channel_ch_4_6[_ch_4_6_in, _ch_4_6_out] 
	 || _channel_ch_5_6[_ch_5_6_in, _ch_5_6_out] 
	 || _channel_ch_6_6[_ch_6_6_in, _ch_6_6_out] 
	 || _channel_ch_7_6[_ch_7_6_in, _ch_7_6_out] 
	 || _channel_ch_8_6[_ch_8_6_in, _ch_8_6_out] 
	 || _channel_ch_9_6[_ch_9_6_in, _ch_9_6_out] 
	 || _channel_ch_0_7[_ch_0_7_in, _ch_0_7_out] 
	 || _channel_ch_1_7[_ch_1_7_in, _ch_1_7_out] 
	 || _channel_ch_2_7[_ch_2_7_in, _ch_2_7_out] 
	 || _channel_ch_3_7[_ch_3_7_in, _ch_3_7_out] 
	 || _channel_ch_4_7[_ch_4_7_in, _ch_4_7_out] 
	 || _channel_ch_5_7[_ch_5_7_in, _ch_5_7_out] 
	 || _channel_ch_6_7[_ch_6_7_in, _ch_6_7_out] 
	 || _channel_ch_7_7[_ch_7_7_in, _ch_7_7_out] 
	 || _channel_ch_8_7[_ch_8_7_in, _ch_8_7_out] 
	 || _channel_ch_9_7[_ch_9_7_in, _ch_9_7_out] 
	 || _channel_ch_0_8[_ch_0_8_in, _ch_0_8_out] 
	 || _channel_ch_1_8[_ch_1_8_in, _ch_1_8_out] 
	 || _channel_ch_2_8[_ch_2_8_in, _ch_2_8_out] 
	 || _channel_ch_3_8[_ch_3_8_in, _ch_3_8_out] 
	 || _channel_ch_4_8[_ch_4_8_in, _ch_4_8_out] 
	 || _channel_ch_5_8[_ch_5_8_in, _ch_5_8_out] 
	 || _channel_ch_6_8[_ch_6_8_in, _ch_6_8_out] 
	 || _channel_ch_7_8[_ch_7_8_in, _ch_7_8_out] 
	 || _channel_ch_8_8[_ch_8_8_in, _ch_8_8_out] 
	 || _channel_ch_9_8[_ch_9_8_in, _ch_9_8_out] 
	 || _channel_ch_0_9[_ch_0_9_in, _ch_0_9_out] 
	 || _channel_ch_1_9[_ch_1_9_in, _ch_1_9_out] 
	 || _channel_ch_2_9[_ch_2_9_in, _ch_2_9_out] 
	 || _channel_ch_3_9[_ch_3_9_in, _ch_3_9_out] 
	 || _channel_ch_4_9[_ch_4_9_in, _ch_4_9_out] 
	 || _channel_ch_5_9[_ch_5_9_in, _ch_5_9_out] 
	 || _channel_ch_6_9[_ch_6_9_in, _ch_6_9_out] 
	 || _channel_ch_7_9[_ch_7_9_in, _ch_7_9_out] 
	 || _channel_ch_8_9[_ch_8_9_in, _ch_8_9_out] 
	 || _channel_ch_9_9[_ch_9_9_in, _ch_9_9_out] 
end par


sys
