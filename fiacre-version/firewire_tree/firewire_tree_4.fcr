type byte is 0..255

process _Node_0 [_ch_1_0_out: in none, _ch_2_0_out: in none, _ch_5_0_out: in none, _ch_6_0_out: in none, _ch_3_0_out: in none, _ch_0_0_out: in none, _ch_4_0_out: in none, _ch_0_6_in: out none, _ch_0_2_in: out none, _ch_0_5_in: out none, _ch_0_1_in: out none, _ch_0_0_in: out none, _ch_0_3_in: out none, _ch_0_4_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) = 1) and _connected[((0 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((0 * 7) + 0)] + _connected[((0 * 7) + 1)]) + _connected[((0 * 7) + 2)]) + _connected[((0 * 7) + 3)]) + _connected[((0 * 7) + 4)]) + _connected[((0 * 7) + 5)]) + _connected[((0 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((0 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((0 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_0_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_1_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_2_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_3_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_4_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_5_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_0_6_in! ((2 * 7) + 0);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 7) + 0);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((0 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 7) + 0);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 0) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 0) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 0) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 0) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 0) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 0) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 0) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 0;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 7) + 0);
	to _response

from _found_partner
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _found_q

from _found_partner
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _found_q

from _found_partner
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _found_q

from _found_partner
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _found_q

from _found_partner
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _found_q

from _found_partner
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _found_q

from _found_partner
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _response_q

from _response
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _response_q

from _response
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _response_q

from _response
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _response_q

from _response
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _response_q

from _response
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _response_q

from _response
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_0_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_1_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_2_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_3_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_4_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_5_in! ((3 * 7) + 0);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_6_in! ((3 * 7) + 0);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_0_in! ((1 * 7) + 0);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_1_in! ((1 * 7) + 0);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_2_in! ((1 * 7) + 0);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_3_in! ((1 * 7) + 0);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_4_in! ((1 * 7) + 0);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_5_in! ((1 * 7) + 0);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_0_6_in! ((1 * 7) + 0);
	to _response

from _loser
	case (0 <> 0) of
	true -> null
	end case;
	_ch_0_0_out? _m;
	to _loser_q

from _loser
	case (1 <> 0) of
	true -> null
	end case;
	_ch_1_0_out? _m;
	to _loser_q

from _loser
	case (2 <> 0) of
	true -> null
	end case;
	_ch_2_0_out? _m;
	to _loser_q

from _loser
	case (3 <> 0) of
	true -> null
	end case;
	_ch_3_0_out? _m;
	to _loser_q

from _loser
	case (4 <> 0) of
	true -> null
	end case;
	_ch_4_0_out? _m;
	to _loser_q

from _loser
	case (5 <> 0) of
	true -> null
	end case;
	_ch_5_0_out? _m;
	to _loser_q

from _loser
	case (6 <> 0) of
	true -> null
	end case;
	_ch_6_0_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_1 [_ch_1_1_out: in none, _ch_2_1_out: in none, _ch_4_1_out: in none, _ch_6_1_out: in none, _ch_3_1_out: in none, _ch_5_1_out: in none, _ch_0_1_out: in none, _ch_1_0_in: out none, _ch_1_2_in: out none, _ch_1_5_in: out none, _ch_1_4_in: out none, _ch_1_6_in: out none, _ch_1_1_in: out none, _ch_1_3_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) = 1) and _connected[((1 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((1 * 7) + 0)] + _connected[((1 * 7) + 1)]) + _connected[((1 * 7) + 2)]) + _connected[((1 * 7) + 3)]) + _connected[((1 * 7) + 4)]) + _connected[((1 * 7) + 5)]) + _connected[((1 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((1 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((1 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_0_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_1_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_2_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_3_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_4_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_5_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_1_6_in! ((2 * 7) + 1);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 7) + 1);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((1 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 7) + 1);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 1) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 1) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 1) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 1) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 1) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 1) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 1) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 1;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 7) + 1);
	to _response

from _found_partner
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _found_q

from _found_partner
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _found_q

from _found_partner
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _found_q

from _found_partner
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _found_q

from _found_partner
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _found_q

from _found_partner
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _found_q

from _found_partner
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _response_q

from _response
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _response_q

from _response
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _response_q

from _response
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _response_q

from _response
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _response_q

from _response
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _response_q

from _response
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_0_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_1_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_2_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_3_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_4_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_5_in! ((3 * 7) + 1);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_6_in! ((3 * 7) + 1);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_0_in! ((1 * 7) + 1);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_1_in! ((1 * 7) + 1);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_2_in! ((1 * 7) + 1);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_3_in! ((1 * 7) + 1);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_4_in! ((1 * 7) + 1);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_5_in! ((1 * 7) + 1);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_1_6_in! ((1 * 7) + 1);
	to _response

from _loser
	case (0 <> 1) of
	true -> null
	end case;
	_ch_0_1_out? _m;
	to _loser_q

from _loser
	case (1 <> 1) of
	true -> null
	end case;
	_ch_1_1_out? _m;
	to _loser_q

from _loser
	case (2 <> 1) of
	true -> null
	end case;
	_ch_2_1_out? _m;
	to _loser_q

from _loser
	case (3 <> 1) of
	true -> null
	end case;
	_ch_3_1_out? _m;
	to _loser_q

from _loser
	case (4 <> 1) of
	true -> null
	end case;
	_ch_4_1_out? _m;
	to _loser_q

from _loser
	case (5 <> 1) of
	true -> null
	end case;
	_ch_5_1_out? _m;
	to _loser_q

from _loser
	case (6 <> 1) of
	true -> null
	end case;
	_ch_6_1_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_2 [_ch_4_2_out: in none, _ch_1_2_out: in none, _ch_5_2_out: in none, _ch_6_2_out: in none, _ch_3_2_out: in none, _ch_2_2_out: in none, _ch_0_2_out: in none, _ch_2_1_in: out none, _ch_2_6_in: out none, _ch_2_2_in: out none, _ch_2_5_in: out none, _ch_2_4_in: out none, _ch_2_3_in: out none, _ch_2_0_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) = 1) and _connected[((2 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((2 * 7) + 0)] + _connected[((2 * 7) + 1)]) + _connected[((2 * 7) + 2)]) + _connected[((2 * 7) + 3)]) + _connected[((2 * 7) + 4)]) + _connected[((2 * 7) + 5)]) + _connected[((2 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((2 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((2 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_0_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_1_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_2_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_3_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_4_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_5_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_2_6_in! ((2 * 7) + 2);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 7) + 2);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((2 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 7) + 2);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 2) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 2) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 2) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 2) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 2) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 2) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 2) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 2;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 7) + 2);
	to _response

from _found_partner
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _found_q

from _found_partner
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _found_q

from _found_partner
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _found_q

from _found_partner
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _found_q

from _found_partner
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _found_q

from _found_partner
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _found_q

from _found_partner
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _response_q

from _response
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _response_q

from _response
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _response_q

from _response
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _response_q

from _response
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _response_q

from _response
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _response_q

from _response
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_0_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_1_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_2_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_3_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_4_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_5_in! ((3 * 7) + 2);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_6_in! ((3 * 7) + 2);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_0_in! ((1 * 7) + 2);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_1_in! ((1 * 7) + 2);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_2_in! ((1 * 7) + 2);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_3_in! ((1 * 7) + 2);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_4_in! ((1 * 7) + 2);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_5_in! ((1 * 7) + 2);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_2_6_in! ((1 * 7) + 2);
	to _response

from _loser
	case (0 <> 2) of
	true -> null
	end case;
	_ch_0_2_out? _m;
	to _loser_q

from _loser
	case (1 <> 2) of
	true -> null
	end case;
	_ch_1_2_out? _m;
	to _loser_q

from _loser
	case (2 <> 2) of
	true -> null
	end case;
	_ch_2_2_out? _m;
	to _loser_q

from _loser
	case (3 <> 2) of
	true -> null
	end case;
	_ch_3_2_out? _m;
	to _loser_q

from _loser
	case (4 <> 2) of
	true -> null
	end case;
	_ch_4_2_out? _m;
	to _loser_q

from _loser
	case (5 <> 2) of
	true -> null
	end case;
	_ch_5_2_out? _m;
	to _loser_q

from _loser
	case (6 <> 2) of
	true -> null
	end case;
	_ch_6_2_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_3 [_ch_2_3_out: in none, _ch_4_3_out: in none, _ch_0_3_out: in none, _ch_1_3_out: in none, _ch_3_3_out: in none, _ch_5_3_out: in none, _ch_6_3_out: in none, _ch_3_0_in: out none, _ch_3_1_in: out none, _ch_3_4_in: out none, _ch_3_2_in: out none, _ch_3_3_in: out none, _ch_3_5_in: out none, _ch_3_6_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) = 1) and _connected[((3 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((3 * 7) + 0)] + _connected[((3 * 7) + 1)]) + _connected[((3 * 7) + 2)]) + _connected[((3 * 7) + 3)]) + _connected[((3 * 7) + 4)]) + _connected[((3 * 7) + 5)]) + _connected[((3 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((3 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((3 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_0_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_1_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_2_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_3_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_4_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_5_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_3_6_in! ((2 * 7) + 3);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 7) + 3);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((3 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 7) + 3);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 3) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 3) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 3) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 3) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 3) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 3) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 3) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 3;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 7) + 3);
	to _response

from _found_partner
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _found_q

from _found_partner
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _found_q

from _found_partner
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _found_q

from _found_partner
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _found_q

from _found_partner
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _found_q

from _found_partner
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _found_q

from _found_partner
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _response_q

from _response
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _response_q

from _response
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _response_q

from _response
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _response_q

from _response
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _response_q

from _response
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _response_q

from _response
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_0_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_1_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_2_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_3_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_4_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_5_in! ((3 * 7) + 3);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_6_in! ((3 * 7) + 3);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_0_in! ((1 * 7) + 3);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_1_in! ((1 * 7) + 3);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_2_in! ((1 * 7) + 3);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_3_in! ((1 * 7) + 3);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_4_in! ((1 * 7) + 3);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_5_in! ((1 * 7) + 3);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_3_6_in! ((1 * 7) + 3);
	to _response

from _loser
	case (0 <> 3) of
	true -> null
	end case;
	_ch_0_3_out? _m;
	to _loser_q

from _loser
	case (1 <> 3) of
	true -> null
	end case;
	_ch_1_3_out? _m;
	to _loser_q

from _loser
	case (2 <> 3) of
	true -> null
	end case;
	_ch_2_3_out? _m;
	to _loser_q

from _loser
	case (3 <> 3) of
	true -> null
	end case;
	_ch_3_3_out? _m;
	to _loser_q

from _loser
	case (4 <> 3) of
	true -> null
	end case;
	_ch_4_3_out? _m;
	to _loser_q

from _loser
	case (5 <> 3) of
	true -> null
	end case;
	_ch_5_3_out? _m;
	to _loser_q

from _loser
	case (6 <> 3) of
	true -> null
	end case;
	_ch_6_3_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_4 [_ch_3_4_out: in none, _ch_4_4_out: in none, _ch_5_4_out: in none, _ch_2_4_out: in none, _ch_1_4_out: in none, _ch_0_4_out: in none, _ch_6_4_out: in none, _ch_4_3_in: out none, _ch_4_4_in: out none, _ch_4_1_in: out none, _ch_4_5_in: out none, _ch_4_0_in: out none, _ch_4_2_in: out none, _ch_4_6_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) = 1) and _connected[((4 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((4 * 7) + 0)] + _connected[((4 * 7) + 1)]) + _connected[((4 * 7) + 2)]) + _connected[((4 * 7) + 3)]) + _connected[((4 * 7) + 4)]) + _connected[((4 * 7) + 5)]) + _connected[((4 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((4 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((4 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_0_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_1_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_2_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_3_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_4_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_5_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_4_6_in! ((2 * 7) + 4);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 7) + 4);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((4 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 7) + 4);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 4) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 4) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 4) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 4) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 4) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 4) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 4) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 4;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 7) + 4);
	to _response

from _found_partner
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _found_q

from _found_partner
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _found_q

from _found_partner
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _found_q

from _found_partner
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _found_q

from _found_partner
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _found_q

from _found_partner
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _found_q

from _found_partner
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _response_q

from _response
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _response_q

from _response
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _response_q

from _response
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _response_q

from _response
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _response_q

from _response
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _response_q

from _response
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_0_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_1_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_2_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_3_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_4_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_5_in! ((3 * 7) + 4);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_6_in! ((3 * 7) + 4);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_0_in! ((1 * 7) + 4);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_1_in! ((1 * 7) + 4);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_2_in! ((1 * 7) + 4);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_3_in! ((1 * 7) + 4);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_4_in! ((1 * 7) + 4);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_5_in! ((1 * 7) + 4);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_4_6_in! ((1 * 7) + 4);
	to _response

from _loser
	case (0 <> 4) of
	true -> null
	end case;
	_ch_0_4_out? _m;
	to _loser_q

from _loser
	case (1 <> 4) of
	true -> null
	end case;
	_ch_1_4_out? _m;
	to _loser_q

from _loser
	case (2 <> 4) of
	true -> null
	end case;
	_ch_2_4_out? _m;
	to _loser_q

from _loser
	case (3 <> 4) of
	true -> null
	end case;
	_ch_3_4_out? _m;
	to _loser_q

from _loser
	case (4 <> 4) of
	true -> null
	end case;
	_ch_4_4_out? _m;
	to _loser_q

from _loser
	case (5 <> 4) of
	true -> null
	end case;
	_ch_5_4_out? _m;
	to _loser_q

from _loser
	case (6 <> 4) of
	true -> null
	end case;
	_ch_6_4_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_5 [_ch_3_5_out: in none, _ch_4_5_out: in none, _ch_2_5_out: in none, _ch_0_5_out: in none, _ch_5_5_out: in none, _ch_6_5_out: in none, _ch_1_5_out: in none, _ch_5_5_in: out none, _ch_5_0_in: out none, _ch_5_1_in: out none, _ch_5_6_in: out none, _ch_5_4_in: out none, _ch_5_2_in: out none, _ch_5_3_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) = 1) and _connected[((5 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((5 * 7) + 0)] + _connected[((5 * 7) + 1)]) + _connected[((5 * 7) + 2)]) + _connected[((5 * 7) + 3)]) + _connected[((5 * 7) + 4)]) + _connected[((5 * 7) + 5)]) + _connected[((5 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((5 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((5 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_0_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_1_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_2_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_3_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_4_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_5_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_5_6_in! ((2 * 7) + 5);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 7) + 5);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((5 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 7) + 5);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 5) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 5) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 5) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 5) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 5) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 5) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 5) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 5;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 7) + 5);
	to _response

from _found_partner
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _found_q

from _found_partner
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _found_q

from _found_partner
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _found_q

from _found_partner
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _found_q

from _found_partner
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _found_q

from _found_partner
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _found_q

from _found_partner
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _response_q

from _response
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _response_q

from _response
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _response_q

from _response
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _response_q

from _response
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _response_q

from _response
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _response_q

from _response
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_0_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_1_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_2_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_3_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_4_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_5_in! ((3 * 7) + 5);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_6_in! ((3 * 7) + 5);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_0_in! ((1 * 7) + 5);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_1_in! ((1 * 7) + 5);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_2_in! ((1 * 7) + 5);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_3_in! ((1 * 7) + 5);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_4_in! ((1 * 7) + 5);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_5_in! ((1 * 7) + 5);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_5_6_in! ((1 * 7) + 5);
	to _response

from _loser
	case (0 <> 5) of
	true -> null
	end case;
	_ch_0_5_out? _m;
	to _loser_q

from _loser
	case (1 <> 5) of
	true -> null
	end case;
	_ch_1_5_out? _m;
	to _loser_q

from _loser
	case (2 <> 5) of
	true -> null
	end case;
	_ch_2_5_out? _m;
	to _loser_q

from _loser
	case (3 <> 5) of
	true -> null
	end case;
	_ch_3_5_out? _m;
	to _loser_q

from _loser
	case (4 <> 5) of
	true -> null
	end case;
	_ch_4_5_out? _m;
	to _loser_q

from _loser
	case (5 <> 5) of
	true -> null
	end case;
	_ch_5_5_out? _m;
	to _loser_q

from _loser
	case (6 <> 5) of
	true -> null
	end case;
	_ch_6_5_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _Node_6 [_ch_4_6_out: in none, _ch_6_6_out: in none, _ch_5_6_out: in none, _ch_0_6_out: in none, _ch_1_6_out: in none, _ch_2_6_out: in none, _ch_3_6_out: in none, _ch_6_2_in: out none, _ch_6_5_in: out none, _ch_6_6_in: out none, _ch_6_1_in: out none, _ch_6_0_in: out none, _ch_6_3_in: out none, _ch_6_4_in: out none] (&_toss: byte, &_elected_num: byte, &_connected: read array 49 of byte, &_elected: write byte) is
states _start, _wait_for_request, _wait_q, _child_handshake, _wait_for_acks, _wait_ack_q, _become_parent, _found_partner, _found_q, _response, _response_q, _contention, _become_child, _winner, _loser, _loser_q, _finish, _error_st
var 
	_received: array 7 of byte, 
	_j: byte, 
	_n: byte, 
	_m: byte 
init to _start

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 0)]) of
	true -> null
	end case;
	_j := 0;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 1)]) of
	true -> null
	end case;
	_j := 1;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 2)]) of
	true -> null
	end case;
	_j := 2;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 3)]) of
	true -> null
	end case;
	_j := 3;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 4)]) of
	true -> null
	end case;
	_j := 4;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 5)]) of
	true -> null
	end case;
	_j := 5;
	to _found_partner

from _start
	case ((((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) = 1) and _connected[((6 * 7) + 6)]) of
	true -> null
	end case;
	_j := 6;
	to _found_partner

from _start
	case (((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]) > 1) of
	true -> null
	end case;
	_n := ((((((_connected[((6 * 7) + 0)] + _connected[((6 * 7) + 1)]) + _connected[((6 * 7) + 2)]) + _connected[((6 * 7) + 3)]) + _connected[((6 * 7) + 4)]) + _connected[((6 * 7) + 5)]) + _connected[((6 * 7) + 6)]);
	to _wait_for_request

from _wait_for_request
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _wait_q

from _wait_for_request
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _wait_q

from _wait_for_request
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _wait_q

from _wait_for_request
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _wait_q

from _wait_for_request
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _wait_q

from _wait_for_request
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _wait_q

from _wait_for_request
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _wait_q

from _wait_q
	case ((((_m / 7) <> 1) or (not _connected[((6 * 7) + (_m % 7))])) or (_received[(_m % 7)] = 1)) of
	true -> null
	end case;
	to _error_st

from _wait_q
	case ((((_m / 7) = 1) and _connected[((6 * 7) + (_m % 7))]) and (_received[(_m % 7)] = 0)) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := (_n - 1);
	to _wait_for_request

from _wait_for_request
	case (_n <= 1) of
	true -> null
	end case;
	_j := 0;
	to _child_handshake

from _child_handshake
	case ((_j < 7) and (not _received[_j])) of
	true -> null
	end case;
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((0 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_0_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((1 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_1_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((2 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_2_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((3 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_3_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((4 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_4_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((5 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_5_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((6 = _j) and _received[_j]) of
	true -> null
	end case;
	_ch_6_6_in! ((2 * 7) + 6);
	_j := (_j + 1);
	to _child_handshake

from _child_handshake
	case ((_n = 0) and (_j = 7)) of
	true -> null
	end case;
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 0)]) and (_received[0] = 0)) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 1)]) and (_received[1] = 0)) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 2)]) and (_received[2] = 0)) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 3)]) and (_received[3] = 0)) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 4)]) and (_received[4] = 0)) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 5)]) and (_received[5] = 0)) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 7) + 6);
	to _wait_for_acks

from _child_handshake
	case ((((_n = 1) and (_j = 7)) and _connected[((6 * 7) + 6)]) and (_received[6] = 0)) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 7) + 6);
	to _wait_for_acks

from _wait_for_acks
	case ((0 <> 6) and (_received[0] = 1)) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((1 <> 6) and (_received[1] = 1)) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((2 <> 6) and (_received[2] = 1)) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((3 <> 6) and (_received[3] = 1)) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((4 <> 6) and (_received[4] = 1)) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((5 <> 6) and (_received[5] = 1)) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _wait_ack_q

from _wait_for_acks
	case ((6 <> 6) and (_received[6] = 1)) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _wait_ack_q

from _wait_ack_q
	case ((_m / 7) <> 3) of
	true -> null
	end case;
	to _error_st

from _wait_ack_q
	case ((_m / 7) = 3) of
	true -> null
	end case;
	_received[(_m % 7)] := 0;
	to _wait_for_acks

from _wait_for_acks
	case (((((((_received[0] + _received[1]) + _received[2]) + _received[3]) + _received[4]) + _received[5]) + _received[6]) = 0) of
	true -> null
	end case;
	to _become_parent

from _become_parent
	case (_n = 0) of
	true -> null
	end case;
	_elected := 6;
	_elected_num := (_elected_num + 1);
	to _finish

from _become_parent
	case (_n = 1) of
	true -> null
	end case;
	to _response

from _found_partner
	case (0 = _j) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (1 = _j) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (2 = _j) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (3 = _j) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (4 = _j) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (5 = _j) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (6 = _j) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 7) + 6);
	to _response

from _found_partner
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _found_q

from _found_partner
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _found_q

from _found_partner
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _found_q

from _found_partner
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _found_q

from _found_partner
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _found_q

from _found_partner
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _found_q

from _found_partner
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _found_q

from _found_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake

from _found_q
	case ((_m / 7) <> 1) of
	true -> null
	end case;
	to _error_st

from _response
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _response_q

from _response
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _response_q

from _response
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _response_q

from _response
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _response_q

from _response
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _response_q

from _response
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _response_q

from _response
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _response_q

from _response_q
	case ((_m / 7) = 2) of
	true -> null
	end case;
	to _become_child

from _become_child
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_0_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_1_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_2_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_3_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_4_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_5_in! ((3 * 7) + 6);
	to _finish

from _become_child
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_6_in! ((3 * 7) + 6);
	to _finish

from _response_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	to _contention

from _contention
	case (_toss = 0) of
	true -> null
	end case;
	_toss := 1;
	to _winner

from _contention
	case (_toss = 1) of
	true -> null
	end case;
	to _loser

from _winner
	case (0 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_0_in! ((1 * 7) + 6);
	to _response

from _winner
	case (1 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_1_in! ((1 * 7) + 6);
	to _response

from _winner
	case (2 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_2_in! ((1 * 7) + 6);
	to _response

from _winner
	case (3 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_3_in! ((1 * 7) + 6);
	to _response

from _winner
	case (4 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_4_in! ((1 * 7) + 6);
	to _response

from _winner
	case (5 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_5_in! ((1 * 7) + 6);
	to _response

from _winner
	case (6 = (_m % 7)) of
	true -> null
	end case;
	_ch_6_6_in! ((1 * 7) + 6);
	to _response

from _loser
	case (0 <> 6) of
	true -> null
	end case;
	_ch_0_6_out? _m;
	to _loser_q

from _loser
	case (1 <> 6) of
	true -> null
	end case;
	_ch_1_6_out? _m;
	to _loser_q

from _loser
	case (2 <> 6) of
	true -> null
	end case;
	_ch_2_6_out? _m;
	to _loser_q

from _loser
	case (3 <> 6) of
	true -> null
	end case;
	_ch_3_6_out? _m;
	to _loser_q

from _loser
	case (4 <> 6) of
	true -> null
	end case;
	_ch_4_6_out? _m;
	to _loser_q

from _loser
	case (5 <> 6) of
	true -> null
	end case;
	_ch_5_6_out? _m;
	to _loser_q

from _loser
	case (6 <> 6) of
	true -> null
	end case;
	_ch_6_6_out? _m;
	to _loser_q

from _loser_q
	case ((_m / 7) = 1) of
	true -> null
	end case;
	_received[(_m % 7)] := 1;
	_n := 1;
	to _child_handshake


process _channel_ch_0_0 [_ch_0_0_in: in none, _ch_0_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_0_in? _v;
	to _tr

from _tr
	_ch_0_0_out! _v;
	to _ready


process _channel_ch_1_0 [_ch_1_0_in: in none, _ch_1_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_0_in? _v;
	to _tr

from _tr
	_ch_1_0_out! _v;
	to _ready


process _channel_ch_2_0 [_ch_2_0_in: in none, _ch_2_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_0_in? _v;
	to _tr

from _tr
	_ch_2_0_out! _v;
	to _ready


process _channel_ch_3_0 [_ch_3_0_in: in none, _ch_3_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_0_in? _v;
	to _tr

from _tr
	_ch_3_0_out! _v;
	to _ready


process _channel_ch_4_0 [_ch_4_0_in: in none, _ch_4_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_0_in? _v;
	to _tr

from _tr
	_ch_4_0_out! _v;
	to _ready


process _channel_ch_5_0 [_ch_5_0_in: in none, _ch_5_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_0_in? _v;
	to _tr

from _tr
	_ch_5_0_out! _v;
	to _ready


process _channel_ch_6_0 [_ch_6_0_in: in none, _ch_6_0_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_0_in? _v;
	to _tr

from _tr
	_ch_6_0_out! _v;
	to _ready


process _channel_ch_0_1 [_ch_0_1_in: in none, _ch_0_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_1_in? _v;
	to _tr

from _tr
	_ch_0_1_out! _v;
	to _ready


process _channel_ch_1_1 [_ch_1_1_in: in none, _ch_1_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_1_in? _v;
	to _tr

from _tr
	_ch_1_1_out! _v;
	to _ready


process _channel_ch_2_1 [_ch_2_1_in: in none, _ch_2_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_1_in? _v;
	to _tr

from _tr
	_ch_2_1_out! _v;
	to _ready


process _channel_ch_3_1 [_ch_3_1_in: in none, _ch_3_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_1_in? _v;
	to _tr

from _tr
	_ch_3_1_out! _v;
	to _ready


process _channel_ch_4_1 [_ch_4_1_in: in none, _ch_4_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_1_in? _v;
	to _tr

from _tr
	_ch_4_1_out! _v;
	to _ready


process _channel_ch_5_1 [_ch_5_1_in: in none, _ch_5_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_1_in? _v;
	to _tr

from _tr
	_ch_5_1_out! _v;
	to _ready


process _channel_ch_6_1 [_ch_6_1_in: in none, _ch_6_1_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_1_in? _v;
	to _tr

from _tr
	_ch_6_1_out! _v;
	to _ready


process _channel_ch_0_2 [_ch_0_2_in: in none, _ch_0_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_2_in? _v;
	to _tr

from _tr
	_ch_0_2_out! _v;
	to _ready


process _channel_ch_1_2 [_ch_1_2_in: in none, _ch_1_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_2_in? _v;
	to _tr

from _tr
	_ch_1_2_out! _v;
	to _ready


process _channel_ch_2_2 [_ch_2_2_in: in none, _ch_2_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_2_in? _v;
	to _tr

from _tr
	_ch_2_2_out! _v;
	to _ready


process _channel_ch_3_2 [_ch_3_2_in: in none, _ch_3_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_2_in? _v;
	to _tr

from _tr
	_ch_3_2_out! _v;
	to _ready


process _channel_ch_4_2 [_ch_4_2_in: in none, _ch_4_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_2_in? _v;
	to _tr

from _tr
	_ch_4_2_out! _v;
	to _ready


process _channel_ch_5_2 [_ch_5_2_in: in none, _ch_5_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_2_in? _v;
	to _tr

from _tr
	_ch_5_2_out! _v;
	to _ready


process _channel_ch_6_2 [_ch_6_2_in: in none, _ch_6_2_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_2_in? _v;
	to _tr

from _tr
	_ch_6_2_out! _v;
	to _ready


process _channel_ch_0_3 [_ch_0_3_in: in none, _ch_0_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_3_in? _v;
	to _tr

from _tr
	_ch_0_3_out! _v;
	to _ready


process _channel_ch_1_3 [_ch_1_3_in: in none, _ch_1_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_3_in? _v;
	to _tr

from _tr
	_ch_1_3_out! _v;
	to _ready


process _channel_ch_2_3 [_ch_2_3_in: in none, _ch_2_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_3_in? _v;
	to _tr

from _tr
	_ch_2_3_out! _v;
	to _ready


process _channel_ch_3_3 [_ch_3_3_in: in none, _ch_3_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_3_in? _v;
	to _tr

from _tr
	_ch_3_3_out! _v;
	to _ready


process _channel_ch_4_3 [_ch_4_3_in: in none, _ch_4_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_3_in? _v;
	to _tr

from _tr
	_ch_4_3_out! _v;
	to _ready


process _channel_ch_5_3 [_ch_5_3_in: in none, _ch_5_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_3_in? _v;
	to _tr

from _tr
	_ch_5_3_out! _v;
	to _ready


process _channel_ch_6_3 [_ch_6_3_in: in none, _ch_6_3_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_3_in? _v;
	to _tr

from _tr
	_ch_6_3_out! _v;
	to _ready


process _channel_ch_0_4 [_ch_0_4_in: in none, _ch_0_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_4_in? _v;
	to _tr

from _tr
	_ch_0_4_out! _v;
	to _ready


process _channel_ch_1_4 [_ch_1_4_in: in none, _ch_1_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_4_in? _v;
	to _tr

from _tr
	_ch_1_4_out! _v;
	to _ready


process _channel_ch_2_4 [_ch_2_4_in: in none, _ch_2_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_4_in? _v;
	to _tr

from _tr
	_ch_2_4_out! _v;
	to _ready


process _channel_ch_3_4 [_ch_3_4_in: in none, _ch_3_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_4_in? _v;
	to _tr

from _tr
	_ch_3_4_out! _v;
	to _ready


process _channel_ch_4_4 [_ch_4_4_in: in none, _ch_4_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_4_in? _v;
	to _tr

from _tr
	_ch_4_4_out! _v;
	to _ready


process _channel_ch_5_4 [_ch_5_4_in: in none, _ch_5_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_4_in? _v;
	to _tr

from _tr
	_ch_5_4_out! _v;
	to _ready


process _channel_ch_6_4 [_ch_6_4_in: in none, _ch_6_4_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_4_in? _v;
	to _tr

from _tr
	_ch_6_4_out! _v;
	to _ready


process _channel_ch_0_5 [_ch_0_5_in: in none, _ch_0_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_5_in? _v;
	to _tr

from _tr
	_ch_0_5_out! _v;
	to _ready


process _channel_ch_1_5 [_ch_1_5_in: in none, _ch_1_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_5_in? _v;
	to _tr

from _tr
	_ch_1_5_out! _v;
	to _ready


process _channel_ch_2_5 [_ch_2_5_in: in none, _ch_2_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_5_in? _v;
	to _tr

from _tr
	_ch_2_5_out! _v;
	to _ready


process _channel_ch_3_5 [_ch_3_5_in: in none, _ch_3_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_5_in? _v;
	to _tr

from _tr
	_ch_3_5_out! _v;
	to _ready


process _channel_ch_4_5 [_ch_4_5_in: in none, _ch_4_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_5_in? _v;
	to _tr

from _tr
	_ch_4_5_out! _v;
	to _ready


process _channel_ch_5_5 [_ch_5_5_in: in none, _ch_5_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_5_in? _v;
	to _tr

from _tr
	_ch_5_5_out! _v;
	to _ready


process _channel_ch_6_5 [_ch_6_5_in: in none, _ch_6_5_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_5_in? _v;
	to _tr

from _tr
	_ch_6_5_out! _v;
	to _ready


process _channel_ch_0_6 [_ch_0_6_in: in none, _ch_0_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_0_6_in? _v;
	to _tr

from _tr
	_ch_0_6_out! _v;
	to _ready


process _channel_ch_1_6 [_ch_1_6_in: in none, _ch_1_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_1_6_in? _v;
	to _tr

from _tr
	_ch_1_6_out! _v;
	to _ready


process _channel_ch_2_6 [_ch_2_6_in: in none, _ch_2_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_2_6_in? _v;
	to _tr

from _tr
	_ch_2_6_out! _v;
	to _ready


process _channel_ch_3_6 [_ch_3_6_in: in none, _ch_3_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_3_6_in? _v;
	to _tr

from _tr
	_ch_3_6_out! _v;
	to _ready


process _channel_ch_4_6 [_ch_4_6_in: in none, _ch_4_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_4_6_in? _v;
	to _tr

from _tr
	_ch_4_6_out! _v;
	to _ready


process _channel_ch_5_6 [_ch_5_6_in: in none, _ch_5_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_5_6_in? _v;
	to _tr

from _tr
	_ch_5_6_out! _v;
	to _ready


process _channel_ch_6_6 [_ch_6_6_in: in none, _ch_6_6_out: out none] is
states _ready, _tr
var 
	_v: byte 
init to _ready

from _ready
	_ch_6_6_in? _v;
	to _tr

from _tr
	_ch_6_6_out! _v;
	to _ready


component sys is
var 
	
	_connected: array 49 of byte := [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], 
	
	_toss: byte, 
	
	_elected: byte := 7, 
	
	_elected_num: byte := 0

port 
	_ch_0_0_in: none, 
	_ch_0_0_out: none, 
	_ch_1_0_in: none, 
	_ch_1_0_out: none, 
	_ch_2_0_in: none, 
	_ch_2_0_out: none, 
	_ch_3_0_in: none, 
	_ch_3_0_out: none, 
	_ch_4_0_in: none, 
	_ch_4_0_out: none, 
	_ch_5_0_in: none, 
	_ch_5_0_out: none, 
	_ch_6_0_in: none, 
	_ch_6_0_out: none, 
	_ch_0_1_in: none, 
	_ch_0_1_out: none, 
	_ch_1_1_in: none, 
	_ch_1_1_out: none, 
	_ch_2_1_in: none, 
	_ch_2_1_out: none, 
	_ch_3_1_in: none, 
	_ch_3_1_out: none, 
	_ch_4_1_in: none, 
	_ch_4_1_out: none, 
	_ch_5_1_in: none, 
	_ch_5_1_out: none, 
	_ch_6_1_in: none, 
	_ch_6_1_out: none, 
	_ch_0_2_in: none, 
	_ch_0_2_out: none, 
	_ch_1_2_in: none, 
	_ch_1_2_out: none, 
	_ch_2_2_in: none, 
	_ch_2_2_out: none, 
	_ch_3_2_in: none, 
	_ch_3_2_out: none, 
	_ch_4_2_in: none, 
	_ch_4_2_out: none, 
	_ch_5_2_in: none, 
	_ch_5_2_out: none, 
	_ch_6_2_in: none, 
	_ch_6_2_out: none, 
	_ch_0_3_in: none, 
	_ch_0_3_out: none, 
	_ch_1_3_in: none, 
	_ch_1_3_out: none, 
	_ch_2_3_in: none, 
	_ch_2_3_out: none, 
	_ch_3_3_in: none, 
	_ch_3_3_out: none, 
	_ch_4_3_in: none, 
	_ch_4_3_out: none, 
	_ch_5_3_in: none, 
	_ch_5_3_out: none, 
	_ch_6_3_in: none, 
	_ch_6_3_out: none, 
	_ch_0_4_in: none, 
	_ch_0_4_out: none, 
	_ch_1_4_in: none, 
	_ch_1_4_out: none, 
	_ch_2_4_in: none, 
	_ch_2_4_out: none, 
	_ch_3_4_in: none, 
	_ch_3_4_out: none, 
	_ch_4_4_in: none, 
	_ch_4_4_out: none, 
	_ch_5_4_in: none, 
	_ch_5_4_out: none, 
	_ch_6_4_in: none, 
	_ch_6_4_out: none, 
	_ch_0_5_in: none, 
	_ch_0_5_out: none, 
	_ch_1_5_in: none, 
	_ch_1_5_out: none, 
	_ch_2_5_in: none, 
	_ch_2_5_out: none, 
	_ch_3_5_in: none, 
	_ch_3_5_out: none, 
	_ch_4_5_in: none, 
	_ch_4_5_out: none, 
	_ch_5_5_in: none, 
	_ch_5_5_out: none, 
	_ch_6_5_in: none, 
	_ch_6_5_out: none, 
	_ch_0_6_in: none, 
	_ch_0_6_out: none, 
	_ch_1_6_in: none, 
	_ch_1_6_out: none, 
	_ch_2_6_in: none, 
	_ch_2_6_out: none, 
	_ch_3_6_in: none, 
	_ch_3_6_out: none, 
	_ch_4_6_in: none, 
	_ch_4_6_out: none, 
	_ch_5_6_in: none, 
	_ch_5_6_out: none, 
	_ch_6_6_in: none, 
	_ch_6_6_out: none

par 
	_Node_0(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_1(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_2(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_3(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_4(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_5(&_toss, &_elected_num, &_connected, &_elected) 
	 || _Node_6(&_toss, &_elected_num, &_connected, &_elected) 
	 || _channel_ch_0_0
	 || _channel_ch_1_0
	 || _channel_ch_2_0
	 || _channel_ch_3_0
	 || _channel_ch_4_0
	 || _channel_ch_5_0
	 || _channel_ch_6_0
	 || _channel_ch_0_1
	 || _channel_ch_1_1
	 || _channel_ch_2_1
	 || _channel_ch_3_1
	 || _channel_ch_4_1
	 || _channel_ch_5_1
	 || _channel_ch_6_1
	 || _channel_ch_0_2
	 || _channel_ch_1_2
	 || _channel_ch_2_2
	 || _channel_ch_3_2
	 || _channel_ch_4_2
	 || _channel_ch_5_2
	 || _channel_ch_6_2
	 || _channel_ch_0_3
	 || _channel_ch_1_3
	 || _channel_ch_2_3
	 || _channel_ch_3_3
	 || _channel_ch_4_3
	 || _channel_ch_5_3
	 || _channel_ch_6_3
	 || _channel_ch_0_4
	 || _channel_ch_1_4
	 || _channel_ch_2_4
	 || _channel_ch_3_4
	 || _channel_ch_4_4
	 || _channel_ch_5_4
	 || _channel_ch_6_4
	 || _channel_ch_0_5
	 || _channel_ch_1_5
	 || _channel_ch_2_5
	 || _channel_ch_3_5
	 || _channel_ch_4_5
	 || _channel_ch_5_5
	 || _channel_ch_6_5
	 || _channel_ch_0_6
	 || _channel_ch_1_6
	 || _channel_ch_2_6
	 || _channel_ch_3_6
	 || _channel_ch_4_6
	 || _channel_ch_5_6
	 || _channel_ch_6_6
end par


sys
