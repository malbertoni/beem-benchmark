type byte is 0..255

process _P (&_peg_count: byte, &_a: array 16 of byte) is
states _q

init to _q

from _q
	case (((_a[((0 * 4) + 0)] = 1) and (_a[((((0 + 1) * 4) + 0) + 1)] = 1)) and (_a[((((0 + 2) * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 0)] := 0;
	_a[((((0 + 1) * 4) + 0) + 1)] := 0;
	_a[((((0 + 2) * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 1)] = 1) and (_a[((((0 + 1) * 4) + 1) + 1)] = 1)) and (_a[((((0 + 2) * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 1)] := 0;
	_a[((((0 + 1) * 4) + 1) + 1)] := 0;
	_a[((((0 + 2) * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 0)] = 1) and (_a[((((1 + 1) * 4) + 0) + 1)] = 1)) and (_a[((((1 + 2) * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 0)] := 0;
	_a[((((1 + 1) * 4) + 0) + 1)] := 0;
	_a[((((1 + 2) * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 1)] = 1) and (_a[((((1 + 1) * 4) + 1) + 1)] = 1)) and (_a[((((1 + 2) * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 1)] := 0;
	_a[((((1 + 1) * 4) + 1) + 1)] := 0;
	_a[((((1 + 2) * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 0)] = 1) and (_a[((((2 - 1) * 4) + 0) + 1)] = 1)) and (_a[((((2 - 2) * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 0)] := 0;
	_a[((((2 - 1) * 4) + 0) + 1)] := 0;
	_a[((((2 - 2) * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 1)] = 1) and (_a[((((2 - 1) * 4) + 1) + 1)] = 1)) and (_a[((((2 - 2) * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 1)] := 0;
	_a[((((2 - 1) * 4) + 1) + 1)] := 0;
	_a[((((2 - 2) * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 0)] = 1) and (_a[((((3 - 1) * 4) + 0) + 1)] = 1)) and (_a[((((3 - 2) * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 0)] := 0;
	_a[((((3 - 1) * 4) + 0) + 1)] := 0;
	_a[((((3 - 2) * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 1)] = 1) and (_a[((((3 - 1) * 4) + 1) + 1)] = 1)) and (_a[((((3 - 2) * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 1)] := 0;
	_a[((((3 - 1) * 4) + 1) + 1)] := 0;
	_a[((((3 - 2) * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 2)] = 1) and (_a[((((0 + 1) * 4) + 2) - 1)] = 1)) and (_a[((((0 + 2) * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 2)] := 0;
	_a[((((0 + 1) * 4) + 2) - 1)] := 0;
	_a[((((0 + 2) * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 3)] = 1) and (_a[((((0 + 1) * 4) + 3) - 1)] = 1)) and (_a[((((0 + 2) * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 3)] := 0;
	_a[((((0 + 1) * 4) + 3) - 1)] := 0;
	_a[((((0 + 2) * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 2)] = 1) and (_a[((((1 + 1) * 4) + 2) - 1)] = 1)) and (_a[((((1 + 2) * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 2)] := 0;
	_a[((((1 + 1) * 4) + 2) - 1)] := 0;
	_a[((((1 + 2) * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 3)] = 1) and (_a[((((1 + 1) * 4) + 3) - 1)] = 1)) and (_a[((((1 + 2) * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 3)] := 0;
	_a[((((1 + 1) * 4) + 3) - 1)] := 0;
	_a[((((1 + 2) * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 2)] = 1) and (_a[((((2 - 1) * 4) + 2) - 1)] = 1)) and (_a[((((2 - 2) * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 2)] := 0;
	_a[((((2 - 1) * 4) + 2) - 1)] := 0;
	_a[((((2 - 2) * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 3)] = 1) and (_a[((((2 - 1) * 4) + 3) - 1)] = 1)) and (_a[((((2 - 2) * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 3)] := 0;
	_a[((((2 - 1) * 4) + 3) - 1)] := 0;
	_a[((((2 - 2) * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 2)] = 1) and (_a[((((3 - 1) * 4) + 2) - 1)] = 1)) and (_a[((((3 - 2) * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 2)] := 0;
	_a[((((3 - 1) * 4) + 2) - 1)] := 0;
	_a[((((3 - 2) * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 3)] = 1) and (_a[((((3 - 1) * 4) + 3) - 1)] = 1)) and (_a[((((3 - 2) * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 3)] := 0;
	_a[((((3 - 1) * 4) + 3) - 1)] := 0;
	_a[((((3 - 2) * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 0)] = 1) and (_a[(((0 * 4) + 0) + 1)] = 1)) and (_a[(((0 * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 0)] := 0;
	_a[(((0 * 4) + 0) + 1)] := 0;
	_a[(((0 * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 1)] = 1) and (_a[(((0 * 4) + 1) + 1)] = 1)) and (_a[(((0 * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 1)] := 0;
	_a[(((0 * 4) + 1) + 1)] := 0;
	_a[(((0 * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 0)] = 1) and (_a[(((1 * 4) + 0) + 1)] = 1)) and (_a[(((1 * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 0)] := 0;
	_a[(((1 * 4) + 0) + 1)] := 0;
	_a[(((1 * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 1)] = 1) and (_a[(((1 * 4) + 1) + 1)] = 1)) and (_a[(((1 * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 1)] := 0;
	_a[(((1 * 4) + 1) + 1)] := 0;
	_a[(((1 * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 0)] = 1) and (_a[(((2 * 4) + 0) + 1)] = 1)) and (_a[(((2 * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 0)] := 0;
	_a[(((2 * 4) + 0) + 1)] := 0;
	_a[(((2 * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 1)] = 1) and (_a[(((2 * 4) + 1) + 1)] = 1)) and (_a[(((2 * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 1)] := 0;
	_a[(((2 * 4) + 1) + 1)] := 0;
	_a[(((2 * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 0)] = 1) and (_a[(((3 * 4) + 0) + 1)] = 1)) and (_a[(((3 * 4) + 0) + 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 0)] := 0;
	_a[(((3 * 4) + 0) + 1)] := 0;
	_a[(((3 * 4) + 0) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 1)] = 1) and (_a[(((3 * 4) + 1) + 1)] = 1)) and (_a[(((3 * 4) + 1) + 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 1)] := 0;
	_a[(((3 * 4) + 1) + 1)] := 0;
	_a[(((3 * 4) + 1) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 2)] = 1) and (_a[(((0 * 4) + 2) - 1)] = 1)) and (_a[(((0 * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 2)] := 0;
	_a[(((0 * 4) + 2) - 1)] := 0;
	_a[(((0 * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 3)] = 1) and (_a[(((0 * 4) + 3) - 1)] = 1)) and (_a[(((0 * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 3)] := 0;
	_a[(((0 * 4) + 3) - 1)] := 0;
	_a[(((0 * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 2)] = 1) and (_a[(((1 * 4) + 2) - 1)] = 1)) and (_a[(((1 * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 2)] := 0;
	_a[(((1 * 4) + 2) - 1)] := 0;
	_a[(((1 * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 3)] = 1) and (_a[(((1 * 4) + 3) - 1)] = 1)) and (_a[(((1 * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 3)] := 0;
	_a[(((1 * 4) + 3) - 1)] := 0;
	_a[(((1 * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 2)] = 1) and (_a[(((2 * 4) + 2) - 1)] = 1)) and (_a[(((2 * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 2)] := 0;
	_a[(((2 * 4) + 2) - 1)] := 0;
	_a[(((2 * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 3)] = 1) and (_a[(((2 * 4) + 3) - 1)] = 1)) and (_a[(((2 * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 3)] := 0;
	_a[(((2 * 4) + 3) - 1)] := 0;
	_a[(((2 * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 2)] = 1) and (_a[(((3 * 4) + 2) - 1)] = 1)) and (_a[(((3 * 4) + 2) - 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 2)] := 0;
	_a[(((3 * 4) + 2) - 1)] := 0;
	_a[(((3 * 4) + 2) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 3)] = 1) and (_a[(((3 * 4) + 3) - 1)] = 1)) and (_a[(((3 * 4) + 3) - 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 3)] := 0;
	_a[(((3 * 4) + 3) - 1)] := 0;
	_a[(((3 * 4) + 3) - 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 0)] = 1) and (_a[(((0 + 1) * 4) + 0)] = 1)) and (_a[(((0 + 2) * 4) + 0)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 0)] := 0;
	_a[(((0 + 1) * 4) + 0)] := 0;
	_a[(((0 + 2) * 4) + 0)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 1)] = 1) and (_a[(((0 + 1) * 4) + 1)] = 1)) and (_a[(((0 + 2) * 4) + 1)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 1)] := 0;
	_a[(((0 + 1) * 4) + 1)] := 0;
	_a[(((0 + 2) * 4) + 1)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 2)] = 1) and (_a[(((0 + 1) * 4) + 2)] = 1)) and (_a[(((0 + 2) * 4) + 2)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 2)] := 0;
	_a[(((0 + 1) * 4) + 2)] := 0;
	_a[(((0 + 2) * 4) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((0 * 4) + 3)] = 1) and (_a[(((0 + 1) * 4) + 3)] = 1)) and (_a[(((0 + 2) * 4) + 3)] = 0)) of
	true -> null
	end case;
	_a[((0 * 4) + 3)] := 0;
	_a[(((0 + 1) * 4) + 3)] := 0;
	_a[(((0 + 2) * 4) + 3)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 0)] = 1) and (_a[(((1 + 1) * 4) + 0)] = 1)) and (_a[(((1 + 2) * 4) + 0)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 0)] := 0;
	_a[(((1 + 1) * 4) + 0)] := 0;
	_a[(((1 + 2) * 4) + 0)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 1)] = 1) and (_a[(((1 + 1) * 4) + 1)] = 1)) and (_a[(((1 + 2) * 4) + 1)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 1)] := 0;
	_a[(((1 + 1) * 4) + 1)] := 0;
	_a[(((1 + 2) * 4) + 1)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 2)] = 1) and (_a[(((1 + 1) * 4) + 2)] = 1)) and (_a[(((1 + 2) * 4) + 2)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 2)] := 0;
	_a[(((1 + 1) * 4) + 2)] := 0;
	_a[(((1 + 2) * 4) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((1 * 4) + 3)] = 1) and (_a[(((1 + 1) * 4) + 3)] = 1)) and (_a[(((1 + 2) * 4) + 3)] = 0)) of
	true -> null
	end case;
	_a[((1 * 4) + 3)] := 0;
	_a[(((1 + 1) * 4) + 3)] := 0;
	_a[(((1 + 2) * 4) + 3)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 0)] = 1) and (_a[(((2 - 1) * 4) + 0)] = 1)) and (_a[(((2 - 2) * 4) + 0)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 0)] := 0;
	_a[(((2 - 1) * 4) + 0)] := 0;
	_a[(((2 - 2) * 4) + 0)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 1)] = 1) and (_a[(((2 - 1) * 4) + 1)] = 1)) and (_a[(((2 - 2) * 4) + 1)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 1)] := 0;
	_a[(((2 - 1) * 4) + 1)] := 0;
	_a[(((2 - 2) * 4) + 1)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 2)] = 1) and (_a[(((2 - 1) * 4) + 2)] = 1)) and (_a[(((2 - 2) * 4) + 2)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 2)] := 0;
	_a[(((2 - 1) * 4) + 2)] := 0;
	_a[(((2 - 2) * 4) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((2 * 4) + 3)] = 1) and (_a[(((2 - 1) * 4) + 3)] = 1)) and (_a[(((2 - 2) * 4) + 3)] = 0)) of
	true -> null
	end case;
	_a[((2 * 4) + 3)] := 0;
	_a[(((2 - 1) * 4) + 3)] := 0;
	_a[(((2 - 2) * 4) + 3)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 0)] = 1) and (_a[(((3 - 1) * 4) + 0)] = 1)) and (_a[(((3 - 2) * 4) + 0)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 0)] := 0;
	_a[(((3 - 1) * 4) + 0)] := 0;
	_a[(((3 - 2) * 4) + 0)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 1)] = 1) and (_a[(((3 - 1) * 4) + 1)] = 1)) and (_a[(((3 - 2) * 4) + 1)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 1)] := 0;
	_a[(((3 - 1) * 4) + 1)] := 0;
	_a[(((3 - 2) * 4) + 1)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 2)] = 1) and (_a[(((3 - 1) * 4) + 2)] = 1)) and (_a[(((3 - 2) * 4) + 2)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 2)] := 0;
	_a[(((3 - 1) * 4) + 2)] := 0;
	_a[(((3 - 2) * 4) + 2)] := 1;
	_peg_count := (_peg_count - 1);
	to _q

from _q
	case (((_a[((3 * 4) + 3)] = 1) and (_a[(((3 - 1) * 4) + 3)] = 1)) and (_a[(((3 - 2) * 4) + 3)] = 0)) of
	true -> null
	end case;
	_a[((3 * 4) + 3)] := 0;
	_a[(((3 - 1) * 4) + 3)] := 0;
	_a[(((3 - 2) * 4) + 3)] := 1;
	_peg_count := (_peg_count - 1);
	to _q


component sys is
var 
	
	_a: array 16 of byte := [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], 
	
	_peg_count: byte := 15

par 
	_P(&_peg_count, &_a) 
end par


sys
