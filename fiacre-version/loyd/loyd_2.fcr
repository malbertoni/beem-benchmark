type byte is 0..255

process _P (&_x: byte, &_y: byte, &_a: array 9 of byte) is
states _q

init to _q

from _q
	case (_x > 0) of
	true -> null
	end case;
	_a[((_y * 3) + _x)] := _a[(((_y * 3) + _x) - 1)];
	_a[(((_y * 3) + _x) - 1)] := 0;
	_x := (_x - 1);
	to _q

from _q
	case (_x < (3 - 1)) of
	true -> null
	end case;
	_a[((_y * 3) + _x)] := _a[(((_y * 3) + _x) + 1)];
	_a[(((_y * 3) + _x) + 1)] := 0;
	_x := (_x + 1);
	to _q

from _q
	case (_y > 0) of
	true -> null
	end case;
	_a[((_y * 3) + _x)] := _a[(((_y - 1) * 3) + _x)];
	_a[(((_y - 1) * 3) + _x)] := 0;
	_y := (_y - 1);
	to _q

from _q
	case (_y < (3 - 1)) of
	true -> null
	end case;
	_a[((_y * 3) + _x)] := _a[(((_y + 1) * 3) + _x)];
	_a[(((_y + 1) * 3) + _x)] := 0;
	_y := (_y + 1);
	to _q


process _Check (&_a: read array 9 of byte) is
states _not_done, _done

init to _not_done

from _not_done
	case (((((((((_a[0] = 8) and (_a[1] = 7)) and (_a[2] = 6)) and (_a[3] = 5)) and (_a[4] = 4)) and (_a[5] = 3)) and (_a[6] = 2)) and (_a[7] = 1)) and (_a[8] = 0)) of
	true -> null
	end case;
	to _done


component sys is
var 
	
	_a: array 9 of byte := [0, 1, 2, 3, 4, 5, 6, 7, 8], 
	
	_x: byte := 0, 
	
	_y: byte := 0

par 
	_P(&_x, &_y, &_a) 
	 || _Check(&_a) 
end par


sys
