type byte is 0..255

process _phil_0 (&_count: byte, &_fork: array 5 of byte) is
states _think, _inside, _one, _eat, _finish

init to _think

from _think
	case (_count < 3) of
	true -> null
	end case;
	_count := (_count + 1);
	to _inside

from _inside
	_count := (_count - 1);
	to _think

from _inside
	case (_fork[0] = 0) of
	true -> null
	end case;
	_fork[0] := 1;
	to _one

from _one
	case (_fork[1] = 0) of
	true -> null
	end case;
	_fork[1] := 1;
	to _eat

from _eat
	_fork[0] := 0;
	to _finish

from _finish
	_fork[1] := 0;
	to _inside


process _phil_1 (&_count: byte, &_fork: array 5 of byte) is
states _think, _inside, _one, _eat, _finish

init to _think

from _think
	case (_count < 3) of
	true -> null
	end case;
	_count := (_count + 1);
	to _inside

from _inside
	_count := (_count - 1);
	to _think

from _inside
	case (_fork[1] = 0) of
	true -> null
	end case;
	_fork[1] := 1;
	to _one

from _one
	case (_fork[2] = 0) of
	true -> null
	end case;
	_fork[2] := 1;
	to _eat

from _eat
	_fork[1] := 0;
	to _finish

from _finish
	_fork[2] := 0;
	to _inside


process _phil_2 (&_count: byte, &_fork: array 5 of byte) is
states _think, _inside, _one, _eat, _finish

init to _think

from _think
	case (_count < 3) of
	true -> null
	end case;
	_count := (_count + 1);
	to _inside

from _inside
	_count := (_count - 1);
	to _think

from _inside
	case (_fork[2] = 0) of
	true -> null
	end case;
	_fork[2] := 1;
	to _one

from _one
	case (_fork[3] = 0) of
	true -> null
	end case;
	_fork[3] := 1;
	to _eat

from _eat
	_fork[2] := 0;
	to _finish

from _finish
	_fork[3] := 0;
	to _inside


process _phil_3 (&_count: byte, &_fork: array 5 of byte) is
states _think, _inside, _one, _eat, _finish

init to _think

from _think
	case (_count < 3) of
	true -> null
	end case;
	_count := (_count + 1);
	to _inside

from _inside
	_count := (_count - 1);
	to _think

from _inside
	case (_fork[3] = 0) of
	true -> null
	end case;
	_fork[3] := 1;
	to _one

from _one
	case (_fork[4] = 0) of
	true -> null
	end case;
	_fork[4] := 1;
	to _eat

from _eat
	_fork[3] := 0;
	to _finish

from _finish
	_fork[4] := 0;
	to _inside


process _phil_4 (&_count: byte, &_fork: array 5 of byte) is
states _think, _inside, _one, _eat, _finish

init to _think

from _think
	case (_count < 3) of
	true -> null
	end case;
	_count := (_count + 1);
	to _inside

from _inside
	_count := (_count - 1);
	to _think

from _inside
	case (_fork[4] = 0) of
	true -> null
	end case;
	_fork[4] := 1;
	to _one

from _one
	case (_fork[0] = 0) of
	true -> null
	end case;
	_fork[0] := 1;
	to _eat

from _eat
	_fork[4] := 0;
	to _finish

from _finish
	_fork[0] := 0;
	to _inside


component sys is
var 
	
	_fork: array 5 of byte, 
	
	_count: byte

par 
	_phil_0(&_count, &_fork) 
	 || _phil_1(&_count, &_fork) 
	 || _phil_2(&_count, &_fork) 
	 || _phil_3(&_count, &_fork) 
	 || _phil_4(&_count, &_fork) 
end par


sys
