type byte is 0..255

process _Timer [_Timeout: out none] is
states _tick

init to _tick

from _tick
	_Timeout;
	to _tick


process _Producer [_Get: out none] is
states _wait, _produce
var 
	_message: byte := 0 
init to _wait

from _wait
	to _produce

from _produce
	_Get! _message;
	_message := ((_message + 1) % 8);
	to _wait


process _Consumer [_Put: in none] is
states _wait, _consume
var 
	_message: byte := 0 
init to _wait

from _wait
	_Put? _message;
	to _consume

from _consume
	to _wait


process _Medium [_SData: in none, _RNak: in none, _RAck: in none, _RCorrData: out none, _RData: out none, _SAck: out none, _SNak: out none] is
states _wait, _data, _ack, _nak, _dataOk, _ackOk, _nakOk
var 
	_value: byte 
init to _wait

from _wait
	_SData? _value;
	to _data

from _data
	_RData! _value;
	to _dataOk

from _data
	_RCorrData! _value;
	to _wait

from _data
	to _wait

from _wait
	_RAck? _value;
	to _ack

from _ack
	_SAck! _value;
	to _ackOk

from _ack
	to _wait

from _wait
	_RNak? _value;
	to _nak

from _nak
	_SNak! _value;
	to _nakOk

from _nak
	to _wait

from _dataOk
	to _wait

from _ackOk
	to _wait

from _nakOk
	to _wait


process _Sender [_Get: in none, _SAck: in none, _Timeout: in none, _SNak: in none, _SData: out none] is
states _wait, _data, _ack, _nak, _timeout
var 
	_sendseq: byte := 1, 
	_rack: byte := 0, 
	_value: byte 
init to _wait

from _wait
	_SAck? _value;
	to _ack

from _wait
	_SNak? _value;
	to _nak

from _wait
	_Timeout;
	to _timeout

from _wait
	case (((_rack + 4) % 8) > _sendseq) of
	true -> null
	end case;
	_Get? _value;
	to _data

from _ack
	case ((((_rack < _sendseq) and (_rack < _value)) and (_value < _sendseq)) or (((_rack > _sendseq) and (_sendseq < _value)) and (_value < _rack))) of
	true -> null
	end case;
	_rack := _value;
	to _wait

from _ack
	case ((((_rack >= _sendseq) or (_rack >= _value)) or (_value >= _sendseq)) and (((_rack <= _sendseq) or (_sendseq >= _value)) or (_value >= _rack))) of
	true -> null
	end case;
	to _wait

from _nak
	case ((((_rack < _sendseq) and (_rack < _value)) and (_value < _sendseq)) or (((_rack > _sendseq) and (_sendseq < _value)) and (_value < _rack))) of
	true -> null
	end case;
	_SData! _value;
	to _wait

from _nak
	case ((((_rack >= _sendseq) or (_rack >= _value)) or (_value >= _sendseq)) and (((_rack <= _sendseq) or (_sendseq >= _value)) or (_value >= _rack))) of
	true -> null
	end case;
	to _wait

from _timeout
	case (((_rack + 1) % 8) <> _sendseq) of
	true -> null
	end case;
	_SData! ((_rack + 1) % 8);
	to _wait

from _timeout
	case (((_rack + 1) % 8) = _sendseq) of
	true -> null
	end case;
	to _wait

from _data
	_SData! _sendseq;
	_sendseq := ((_sendseq + 1) % 8);
	to _wait


process _Receiver [_RCorrData: in none, _RData: in none, _Timeout: in none, _RNak: out none, _Put: out none, _RAck: out none] is
states _wait, _data, _put_data, _send_naks, _corr_data, _on_timeout, _timeout_ack
var 
	_i: byte, 
	_value: byte, 
	_sent: byte := 0, 
	_recseq: byte := 0, 
	_lack: byte := 0, 
	_recbuf: array 8 of byte, 
	_nakd: array 8 of byte 
init to _wait

from _wait
	_RData? _value;
	to _data

from _wait
	_RCorrData? _value;
	to _corr_data

from _wait
	_Timeout;
	_i := 0;
	to _on_timeout

from _data
	case (_value <> ((_recseq + 1) % 8)) of
	true -> null
	end case;
	_recbuf[_value] := 1;
	_i := ((_recseq + 1) % 8);
	to _send_naks

from _data
	case (_value = ((_recseq + 1) % 8)) of
	true -> null
	end case;
	_Put! _value;
	_recseq := ((_recseq + 1) % 8);
	_sent := ((_sent + 1) % 8);
	to _put_data

from _send_naks
	case ((_i <> _value) and (_nakd[_i] = 1)) of
	true -> null
	end case;
	_i := ((_i + 1) % 8);
	to _send_naks

from _send_naks
	case ((_i <> _value) and (_nakd[_i] = 0)) of
	true -> null
	end case;
	_RNak! _i;
	_nakd[_i] := 1;
	_i := ((_i + 1) % 8);
	to _send_naks

from _send_naks
	case (_i = _value) of
	true -> null
	end case;
	to _wait

from _put_data
	case (_sent = (4 / 2)) of
	true -> null
	end case;
	_RAck! _recseq;
	_lack := _recseq;
	_sent := 0;
	to _put_data

from _put_data
	case ((_sent <> (4 / 2)) and (_recbuf[((_recseq + 1) % 8)] = 1)) of
	true -> null
	end case;
	_Put! ((_recseq + 1) % 8);
	_recseq := ((_recseq + 1) % 8);
	_recbuf[_recseq] := 0;
	to _put_data

from _put_data
	case ((_sent <> (4 / 2)) and (_recbuf[((_recseq + 1) % 8)] = 0)) of
	true -> null
	end case;
	to _wait

from _corr_data
	case (_nakd[_value] = 0) of
	true -> null
	end case;
	_RNak! _value;
	to _wait

from _corr_data
	case (_nakd[_value] = 1) of
	true -> null
	end case;
	to _wait

from _on_timeout
	case (_i < 8) of
	true -> null
	end case;
	_nakd[_i] := 0;
	_i := (_i + 1);
	to _on_timeout

from _on_timeout
	case (_i = 8) of
	true -> null
	end case;
	_RNak! ((_recseq + 1) % 8);
	_nakd[((_recseq + 1) % 8)] := 1;
	to _timeout_ack

from _timeout_ack
	_RAck! _lack;
	to _wait


component sys is
port 
	_Get: none, 
	_Put: none, 
	_SAck: none, 
	_SNak: none, 
	_SData: none, 
	_RAck: none, 
	_RNak: none, 
	_RData: none, 
	_RCorrData: none, 
	_Timeout: none

par 
	_Timer[_Timeout] 
	 || _Producer[_Get] 
	 || _Consumer[_Put] 
	 || _Medium[_SData, _RNak, _RAck, _RCorrData, _RData, _SAck, _SNak] 
	 || _Sender[_Get, _SAck, _Timeout, _SNak, _SData] 
	 || _Receiver[_RCorrData, _RData, _Timeout, _RNak, _Put, _RAck] 
end par


sys
