type byte is 0..255

process _P_0 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_1 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_2 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_3 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_4 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_5 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


process _P_6 (&_Slot: array 7 of byte, &_next: byte) is
states _NCS, _p1, _p2, _p3, _CS
var 
	_my_place: byte 
init to _NCS

from _NCS
	_my_place := _next;
	_next := (_next + 1);
	to _p1

from _p1
	case (_my_place = (7 - 1)) of
	true -> null
	end case;
	_next := (_next - 7);
	to _p2

from _p1
	case (_my_place <> (7 - 1)) of
	true -> null
	end case;
	_my_place := (_my_place % 7);
	to _p2

from _p2
	case (_Slot[_my_place] = 1) of
	true -> null
	end case;
	to _p3

from _p3
	_Slot[_my_place] := 0;
	to _CS

from _CS
	_Slot[((_my_place + 1) % 7)] := 1;
	to _NCS


component sys is
var 
	
	_Slot: array 7 of byte := [1, 0, 0, 0, 0, 0, 0, 0], 
	
	_next: byte := 0

par 
	_P_0(&_Slot, &_next) 
	 || _P_1(&_Slot, &_next) 
	 || _P_2(&_Slot, &_next) 
	 || _P_3(&_Slot, &_next) 
	 || _P_4(&_Slot, &_next) 
	 || _P_5(&_Slot, &_next) 
	 || _P_6(&_Slot, &_next) 
end par


sys
