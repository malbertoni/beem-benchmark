type byte is 0..255

process _AtoB (&_a: array 16 of byte, &_b_act: byte, &_a_act: byte, &_b: array 16 of byte) is
states _q

init to _q

from _q
	case (_a[(_a_act - 1)] < _b[(_b_act - 1)]) of
	true -> null
	end case;
	_b[_b_act] := _a[(_a_act - 1)];
	_b_act := (_b_act + 1);
	_a[(_a_act - 1)] := 0;
	_a_act := (_a_act - 1);
	to _q


process _AtoC (&_c_act: byte, &_a: array 16 of byte, &_c: array 16 of byte, &_a_act: byte) is
states _q

init to _q

from _q
	case (_a[(_a_act - 1)] < _c[(_c_act - 1)]) of
	true -> null
	end case;
	_c[_c_act] := _a[(_a_act - 1)];
	_c_act := (_c_act + 1);
	_a[(_a_act - 1)] := 0;
	_a_act := (_a_act - 1);
	to _q


process _BtoA (&_a: array 16 of byte, &_b_act: byte, &_b: array 16 of byte, &_a_act: byte) is
states _q

init to _q

from _q
	case (_b[(_b_act - 1)] < _a[(_a_act - 1)]) of
	true -> null
	end case;
	_a[_a_act] := _b[(_b_act - 1)];
	_a_act := (_a_act + 1);
	_b[(_b_act - 1)] := 0;
	_b_act := (_b_act - 1);
	to _q


process _BtoC (&_c_act: byte, &_c: array 16 of byte, &_b_act: byte, &_b: array 16 of byte) is
states _q

init to _q

from _q
	case (_b[(_b_act - 1)] < _c[(_c_act - 1)]) of
	true -> null
	end case;
	_c[_c_act] := _b[(_b_act - 1)];
	_c_act := (_c_act + 1);
	_b[(_b_act - 1)] := 0;
	_b_act := (_b_act - 1);
	to _q


process _CtoA (&_c_act: byte, &_a: array 16 of byte, &_c: array 16 of byte, &_a_act: byte) is
states _q

init to _q

from _q
	case (_c[(_c_act - 1)] < _a[(_a_act - 1)]) of
	true -> null
	end case;
	_a[_a_act] := _c[(_c_act - 1)];
	_a_act := (_a_act + 1);
	_c[(_c_act - 1)] := 0;
	_c_act := (_c_act - 1);
	to _q


process _CtoB (&_c_act: byte, &_c: array 16 of byte, &_b_act: byte, &_b: array 16 of byte) is
states _q

init to _q

from _q
	case (_c[(_c_act - 1)] < _b[(_b_act - 1)]) of
	true -> null
	end case;
	_b[_b_act] := _c[(_c_act - 1)];
	_b_act := (_b_act + 1);
	_c[(_c_act - 1)] := 0;
	_c_act := (_c_act - 1);
	to _q


component sys is
var 
	
	_a: array 16 of byte := [100, (15 - 0), (15 - 1), (15 - 2), (15 - 3), (15 - 4), (15 - 5), (15 - 6), (15 - 7), (15 - 8), (15 - 9), (15 - 10), (15 - 11), (15 - 12), (15 - 13), (15 - 14)], 
	
	_a_act: byte := 16, 
	
	_b: array 16 of byte := [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
	
	_b_act: byte := 1, 
	
	_c: array 16 of byte := [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
	
	_c_act: byte := 1

par 
	_AtoB(&_a, &_b_act, &_a_act, &_b) 
	 || _AtoC(&_c_act, &_a, &_c, &_a_act) 
	 || _BtoA(&_a, &_b_act, &_b, &_a_act) 
	 || _BtoC(&_c_act, &_c, &_b_act, &_b) 
	 || _CtoA(&_c_act, &_a, &_c, &_a_act) 
	 || _CtoB(&_c_act, &_c, &_b_act, &_b) 
end par


sys
