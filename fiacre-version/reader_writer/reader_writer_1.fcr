type byte is 0..255

process _reader_0 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_1 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_2 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_3 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_4 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_5 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _reader_6 [_start_read: out none, _stop_read: out none] is
states _idle, _reading

init to _idle

from _idle
	_start_read;
	to _reading

from _reading
	_stop_read;
	to _idle


process _writer_0 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_1 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_2 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_3 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_4 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_5 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_6 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_7 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _writer_8 [_stop_write: out none, _start_write: out none] is
states _idle, _writing

init to _idle

from _idle
	_start_write;
	to _writing

from _writing
	_stop_write;
	to _idle


process _control [_stop_write: in none, _start_read: in none, _stop_read: in none, _start_write: in none] (&_activeR: byte) is
states _ready, _readers_active, _writer_active, _q_error

init to _ready

from _ready
	_start_read;
	_activeR := 1;
	to _readers_active

from _readers_active
	_start_read;
	_activeR := (_activeR + 1);
	to _readers_active

from _readers_active
	case (_activeR > 0) of
	true -> null
	end case;
	_stop_read;
	_activeR := 1;
	to _readers_active

from _readers_active
	case (_activeR = 1) of
	true -> null
	end case;
	_stop_read;
	_activeR := 0;
	to _ready

from _readers_active
	_stop_write;
	to _q_error

from _ready
	_start_write;
	to _writer_active

from _writer_active
	_stop_write;
	to _ready

from _writer_active
	_stop_read;
	to _q_error


component sys is
var 
	
	_activeR: byte := 0

port 
	_start_read: none, 
	_stop_read: none, 
	_start_write: none, 
	_stop_write: none

par 
	_reader_0
	 || _reader_1
	 || _reader_2
	 || _reader_3
	 || _reader_4
	 || _reader_5
	 || _reader_6
	 || _writer_0
	 || _writer_1
	 || _writer_2
	 || _writer_3
	 || _writer_4
	 || _writer_5
	 || _writer_6
	 || _writer_7
	 || _writer_8
	 || _control(&_activeR) 
end par


sys
